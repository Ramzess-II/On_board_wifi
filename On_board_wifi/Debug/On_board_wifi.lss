
On_board_wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002324  000023b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000393  00800102  00800102  000023ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fa6  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7c  00000000  00000000  00005572  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001688  00000000  00000000  000061ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00007878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f21  00000000  00000000  00007ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001419  00000000  00000000  00008c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000a01a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 94 00 	jmp	0x128	; 0x128 <__ctors_end>
       4:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_1>
       8:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
       c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      18:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      1c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      2c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      40:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__vector_16>
      44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      48:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__vector_18>
      4c:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_19>
      50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      54:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      58:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      5c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      60:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      64:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      68:	05 08       	sbc	r0, r5
      6a:	11 08       	sbc	r1, r1
      6c:	1d 08       	sbc	r1, r13
      6e:	29 08       	sbc	r2, r9
      70:	9d 0c       	add	r9, r13
      72:	35 08       	sbc	r3, r5
      74:	4a 08       	sbc	r4, r10
      76:	5f 08       	sbc	r5, r15
      78:	74 08       	sbc	r7, r4
      7a:	e1 08       	sbc	r14, r1
      7c:	18 09       	sbc	r17, r8
      7e:	4f 09       	sbc	r20, r15
      80:	86 09       	sbc	r24, r6
      82:	15 0a       	sbc	r1, r21
      84:	1e 0a       	sbc	r1, r30
      86:	24 0a       	sbc	r2, r20
      88:	2d 0a       	sbc	r2, r29
      8a:	33 0a       	sbc	r3, r19
      8c:	43 0a       	sbc	r4, r19
      8e:	53 0a       	sbc	r5, r19
      90:	63 0a       	sbc	r6, r19
      92:	73 0a       	sbc	r7, r19
      94:	7e 0a       	sbc	r7, r30
      96:	89 0a       	sbc	r8, r25
      98:	94 0a       	sbc	r9, r20
      9a:	9f 0a       	sbc	r9, r31
      9c:	ab 0a       	sbc	r10, r27
      9e:	c0 0a       	sbc	r12, r16
      a0:	27 0b       	sbc	r18, r23
      a2:	33 0b       	sbc	r19, r19
      a4:	48 0b       	sbc	r20, r24
      a6:	54 0b       	sbc	r21, r20
      a8:	69 0b       	sbc	r22, r25
      aa:	75 0b       	sbc	r23, r21
      ac:	8a 0b       	sbc	r24, r26
      ae:	96 0b       	sbc	r25, r22
      b0:	ab 0b       	sbc	r26, r27
      b2:	b7 0b       	sbc	r27, r23
      b4:	cc 0b       	sbc	r28, r28
      b6:	d8 0b       	sbc	r29, r24
      b8:	ed 0b       	sbc	r30, r29
      ba:	f9 0b       	sbc	r31, r25
      bc:	0e 0c       	add	r0, r14
      be:	1a 0c       	add	r1, r10
      c0:	2f 0c       	add	r2, r15
      c2:	3b 0c       	add	r3, r11
      c4:	50 0c       	add	r5, r0
      c6:	5c 0c       	add	r5, r12
      c8:	71 0c       	add	r7, r1
      ca:	7d 0c       	add	r7, r13
      cc:	92 0c       	add	r9, r2
      ce:	61 0e       	add	r6, r17
      d0:	73 0e       	add	r7, r19
      d2:	85 0e       	add	r8, r21
      d4:	97 0e       	add	r9, r23
      d6:	a9 0e       	add	r10, r25
      d8:	ad 0e       	add	r10, r29
      da:	b1 0e       	add	r11, r17
      dc:	b5 0e       	add	r11, r21
      de:	b9 0e       	add	r11, r25
      e0:	f5 0e       	add	r15, r21
      e2:	bd 0e       	add	r11, r29
      e4:	f5 0e       	add	r15, r21
      e6:	f5 0e       	add	r15, r21
      e8:	f5 0e       	add	r15, r21
      ea:	f5 0e       	add	r15, r21
      ec:	f5 0e       	add	r15, r21
      ee:	f5 0e       	add	r15, r21
      f0:	f5 0e       	add	r15, r21
      f2:	f5 0e       	add	r15, r21
      f4:	f5 0e       	add	r15, r21
      f6:	f5 0e       	add	r15, r21
      f8:	c1 0e       	add	r12, r17
      fa:	c5 0e       	add	r12, r21
      fc:	f5 0e       	add	r15, r21
      fe:	c9 0e       	add	r12, r25
     100:	f5 0e       	add	r15, r21
     102:	cd 0e       	add	r12, r29
     104:	f5 0e       	add	r15, r21
     106:	d1 0e       	add	r13, r17
     108:	f5 0e       	add	r15, r21
     10a:	d5 0e       	add	r13, r21
     10c:	f5 0e       	add	r15, r21
     10e:	d9 0e       	add	r13, r25
     110:	f5 0e       	add	r15, r21
     112:	dd 0e       	add	r13, r29
     114:	f5 0e       	add	r15, r21
     116:	e1 0e       	add	r14, r17
     118:	f5 0e       	add	r15, r21
     11a:	e5 0e       	add	r14, r21
     11c:	f5 0e       	add	r15, r21
     11e:	e9 0e       	add	r14, r25
     120:	f5 0e       	add	r15, r21
     122:	ed 0e       	add	r14, r29
     124:	f5 0e       	add	r15, r21
     126:	f1 0e       	add	r15, r17

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d8 e0       	ldi	r29, 0x08	; 8
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
     134:	11 e0       	ldi	r17, 0x01	; 1
     136:	a0 e0       	ldi	r26, 0x00	; 0
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	e4 e2       	ldi	r30, 0x24	; 36
     13c:	f3 e2       	ldi	r31, 0x23	; 35
     13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x10>
     140:	05 90       	lpm	r0, Z+
     142:	0d 92       	st	X+, r0
     144:	a2 30       	cpi	r26, 0x02	; 2
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0xc>

0000014a <__do_clear_bss>:
     14a:	24 e0       	ldi	r18, 0x04	; 4
     14c:	a2 e0       	ldi	r26, 0x02	; 2
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	a5 39       	cpi	r26, 0x95	; 149
     156:	b2 07       	cpc	r27, r18
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <main>
     15e:	0c 94 90 11 	jmp	0x2320	; 0x2320 <_exit>

00000162 <__bad_interrupt>:
     162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <_Z8I2C_Initv>:



void I2C_Init(void)  // инициализаци€ »2—
{
     TWBR = 0x20; //скорость передачи (при 8 м√ц получаетс€ 100 к√ц)
     166:	80 e2       	ldi	r24, 0x20	; 32
     168:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     TWSR = 0x01;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     172:	08 95       	ret

00000174 <_Z18I2C_StartConditionv>:
}

void I2C_StartCondition(void)  // формируем  старт
{
     TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     174:	84 ea       	ldi	r24, 0xA4	; 164
     176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     while(!(TWCR&(1<<TWINT)));//подождем пока установитс€ TWIN //‘лаг TWINT установитс€ в следующих ситуаци€х
     17a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     17e:	88 23       	and	r24, r24
     180:	e4 f7       	brge	.-8      	; 0x17a <_Z18I2C_StartConditionv+0x6>
}
     182:	08 95       	ret

00000184 <_Z17I2C_StopConditionv>:

void I2C_StopCondition(void)     // формируем стоп
{
     TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     184:	84 e9       	ldi	r24, 0x94	; 148
     186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     18a:	08 95       	ret

0000018c <_Z12I2C_SendByteh>:
}

void I2C_SendByte(unsigned char c)     // отправить байт
{
     TWDR = c;//запишем байт в регистр данных
     18c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     TWCR = (1<<TWINT)|(1<<TWEN);//включим передачу байта
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     while (!(TWCR & (1<<TWINT)));//подождем пока установитс€ TWIN
     196:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     19a:	88 23       	and	r24, r24
     19c:	e4 f7       	brge	.-8      	; 0x196 <_Z12I2C_SendByteh+0xa>
}
     19e:	08 95       	ret

000001a0 <_Z11EE_ReadBytev>:

unsigned char EE_ReadByte(void)    // прочитать байт, и сказать ок
{
     TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);//включим прием данных
     1a0:	84 ec       	ldi	r24, 0xC4	; 196
     1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     while(!(TWCR & (1<<TWINT)));//подождем пока установитс€ TWIN
     1a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1aa:	88 23       	and	r24, r24
     1ac:	e4 f7       	brge	.-8      	; 0x1a6 <_Z11EE_ReadBytev+0x6>
     return TWDR;
     1ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     1b2:	08 95       	ret

000001b4 <_Z15EE_ReadLastBytev>:

unsigned char EE_ReadLastByte(void)  // прочитать последний байт и не говорить ок
{
     TWCR = (1<<TWINT)|(1<<TWEN);//включим прием данных
     1b4:	84 e8       	ldi	r24, 0x84	; 132
     1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     while(!(TWCR&(1<<TWINT)));//подождем пока установитс€ TWIN
     1ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1be:	88 23       	and	r24, r24
     1c0:	e4 f7       	brge	.-8      	; 0x1ba <_Z15EE_ReadLastBytev+0x6>
     return TWDR;
     1c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     1c6:	08 95       	ret

000001c8 <_Z8init_adcv>:

void init_adc (void) {  // инициализаци€ ј÷ѕ
     
     I2C_StartCondition(); // формируем старт
     1c8:	0e 94 ba 00 	call	0x174	; 0x174 <_Z18I2C_StartConditionv>
     I2C_SendByte(0x90); // адресс устройства
     1cc:	80 e9       	ldi	r24, 0x90	; 144
     1ce:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0x03); // адрес регистра
     1d2:	83 e0       	ldi	r24, 0x03	; 3
     1d4:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0xFF); // регистры 16 битные значит две послыки сначала старший
     1d8:	8f ef       	ldi	r24, 0xFF	; 255
     1da:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0xFF); // потом младший байт
     1de:	8f ef       	ldi	r24, 0xFF	; 255
     1e0:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_StopCondition();
     1e4:	0e 94 c2 00 	call	0x184	; 0x184 <_Z17I2C_StopConditionv>
     
     I2C_StartCondition();
     1e8:	0e 94 ba 00 	call	0x174	; 0x174 <_Z18I2C_StartConditionv>
     I2C_SendByte(0x90); // 90 запись 91 чтение
     1ec:	80 e9       	ldi	r24, 0x90	; 144
     1ee:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0x02);
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0x00);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0x00);
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_StopCondition();
     204:	0e 94 c2 00 	call	0x184	; 0x184 <_Z17I2C_StopConditionv>
     
     I2C_StartCondition();
     208:	0e 94 ba 00 	call	0x174	; 0x174 <_Z18I2C_StartConditionv>
     I2C_SendByte(0x90); // 90 запись 91 чтение
     20c:	80 e9       	ldi	r24, 0x90	; 144
     20e:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0x01);
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0xC1); // канал 1 выбираем + одиночное преобразование
     218:	81 ec       	ldi	r24, 0xC1	; 193
     21a:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0xA8); // 250 герц + активный высокий уровень
     21e:	88 ea       	ldi	r24, 0xA8	; 168
     220:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_StopCondition();
     224:	0e 94 c2 00 	call	0x184	; 0x184 <_Z17I2C_StopConditionv>
     228:	08 95       	ret

0000022a <_Z8get_datav>:
}

uint16_t get_data (void){  // чтение данных из ј÷ѕ
     static uint16_t dat1;
   //  static uint8_t mirror;
     I2C_StartCondition();
     22a:	0e 94 ba 00 	call	0x174	; 0x174 <_Z18I2C_StartConditionv>
     I2C_SendByte(0x90); // отправили адрес
     22e:	80 e9       	ldi	r24, 0x90	; 144
     230:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0x00); // записали регистр из которго читаем
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_StopCondition(); // стоп
     23a:	0e 94 c2 00 	call	0x184	; 0x184 <_Z17I2C_StopConditionv>
     I2C_StartCondition(); // повторный старт
     23e:	0e 94 ba 00 	call	0x174	; 0x174 <_Z18I2C_StartConditionv>
     I2C_SendByte(0x91);  // и теперь чтение
     242:	81 e9       	ldi	r24, 0x91	; 145
     244:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     
     dat1 = EE_ReadByte();  // читаем старшую часть
     248:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z11EE_ReadBytev>
     dat1 = dat1 << 8;
     24c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
     250:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x1>
     dat1 |= EE_ReadLastByte();  // потом младшую
     254:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z15EE_ReadLastBytev>
     258:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
     25c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
     260:	28 2b       	or	r18, r24
     262:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
     266:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
     I2C_StopCondition();
     26a:	0e 94 c2 00 	call	0x184	; 0x184 <_Z17I2C_StopConditionv>
     return dat1;
}
     26e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
     272:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
     276:	08 95       	ret

00000278 <_Z16start_convertionh>:

void start_convertion (uint8_t number)
{
     278:	cf 93       	push	r28
     27a:	c8 2f       	mov	r28, r24
     I2C_StartCondition();
     27c:	0e 94 ba 00 	call	0x174	; 0x174 <_Z18I2C_StartConditionv>
     I2C_SendByte(0x90); // 90 запись 91 чтение
     280:	80 e9       	ldi	r24, 0x90	; 144
     282:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_SendByte(0x01);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     switch(number){
     28c:	c2 30       	cpi	r28, 0x02	; 2
     28e:	69 f0       	breq	.+26     	; 0x2aa <_Z16start_convertionh+0x32>
     290:	18 f4       	brcc	.+6      	; 0x298 <_Z16start_convertionh+0x20>
     292:	c1 30       	cpi	r28, 0x01	; 1
     294:	31 f0       	breq	.+12     	; 0x2a2 <_Z16start_convertionh+0x2a>
     296:	14 c0       	rjmp	.+40     	; 0x2c0 <_Z16start_convertionh+0x48>
     298:	c3 30       	cpi	r28, 0x03	; 3
     29a:	59 f0       	breq	.+22     	; 0x2b2 <_Z16start_convertionh+0x3a>
     29c:	c4 30       	cpi	r28, 0x04	; 4
     29e:	69 f0       	breq	.+26     	; 0x2ba <_Z16start_convertionh+0x42>
     2a0:	0f c0       	rjmp	.+30     	; 0x2c0 <_Z16start_convertionh+0x48>
          case 1: I2C_SendByte(0xC1); // канал 1 выбираем + одиночное преобразование
     2a2:	81 ec       	ldi	r24, 0xC1	; 193
     2a4:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
          break;
     2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <_Z16start_convertionh+0x48>
          case 2: I2C_SendByte(0xD1); // канал 2 выбираем + одиночное преобразование
     2aa:	81 ed       	ldi	r24, 0xD1	; 209
     2ac:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
          break;
     2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <_Z16start_convertionh+0x48>
          case 3: I2C_SendByte(0xE1); // канал 3 выбираем + одиночное преобразование
     2b2:	81 ee       	ldi	r24, 0xE1	; 225
     2b4:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
          break;
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <_Z16start_convertionh+0x48>
          case 4: I2C_SendByte(0xF1); // канал 4 выбираем + одиночное преобразование
     2ba:	81 ef       	ldi	r24, 0xF1	; 241
     2bc:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
          break;
     }
     I2C_SendByte(0xA8); // 250 герц
     2c0:	88 ea       	ldi	r24, 0xA8	; 168
     2c2:	0e 94 c6 00 	call	0x18c	; 0x18c <_Z12I2C_SendByteh>
     I2C_StopCondition();
     2c6:	0e 94 c2 00 	call	0x184	; 0x184 <_Z17I2C_StopConditionv>
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <_Z12EEPROM_writejh>:
#include "EEprom.h"

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)      // функци€ записи в еепром 8 битного числа  по заданному адресу
{
     cli();
     2ce:	f8 94       	cli
     while(EECR & (1<<EEPE)){}       //ждем освобождени€ флага окончани€ последней операцией с пам€тью
     2d0:	f9 99       	sbic	0x1f, 1	; 31
     2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <_Z12EEPROM_writejh+0x2>
     EEAR = uiAddress;               //”станавливаем адрес
     2d4:	92 bd       	out	0x22, r25	; 34
     2d6:	81 bd       	out	0x21, r24	; 33
     EEDR = ucData;                  //ѕищем данные в регистр
     2d8:	60 bd       	out	0x20, r22	; 32
     EECR |= (1<<EEMPE);             //–азрешаем запись
     2da:	8f b3       	in	r24, 0x1f	; 31
     2dc:	84 60       	ori	r24, 0x04	; 4
     2de:	8f bb       	out	0x1f, r24	; 31
     EECR |= (1<<EEPE);              //ѕишем байт в пам€ть
     2e0:	8f b3       	in	r24, 0x1f	; 31
     2e2:	82 60       	ori	r24, 0x02	; 2
     2e4:	8f bb       	out	0x1f, r24	; 31
     sei();
     2e6:	78 94       	sei
     2e8:	08 95       	ret

000002ea <_Z11EEPROM_readj>:
}

uint8_t EEPROM_read(uint16_t uiAddress)                     // функци€ чтени€ 8 битного числа из еепром
{
     cli();
     2ea:	f8 94       	cli
     while(EECR & (1<<EEPE)){}                              //ждем освобождени€ флага окончани€ последней операцией с пам€тью
     2ec:	f9 99       	sbic	0x1f, 1	; 31
     2ee:	fe cf       	rjmp	.-4      	; 0x2ec <_Z11EEPROM_readj+0x2>
     EEAR = uiAddress;                                      //”станавливаем адрес
     2f0:	92 bd       	out	0x22, r25	; 34
     2f2:	81 bd       	out	0x21, r24	; 33
     EECR |= (1<<EERE);                                     //«апускаем операцию считывани€ из пам€ти в регистр данных
     2f4:	8f b3       	in	r24, 0x1f	; 31
     2f6:	81 60       	ori	r24, 0x01	; 1
     2f8:	8f bb       	out	0x1f, r24	; 31
     sei();
     2fa:	78 94       	sei
     return EEDR; //¬озвращаем результат
     2fc:	80 b5       	in	r24, 0x20	; 32
}
     2fe:	08 95       	ret

00000300 <_Z15EEPROM_read_32tj>:

uint32_t EEPROM_read_32t (uint16_t uiAddress)                // функци€ чтени€ 32битного числа из еепром по заданному дресу
{
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ec 01       	movw	r28, r24
     static uint32_t receive_data;                            // создали переменную
     receive_data = EEPROM_read (uiAddress+0x03);             // считали в нее старшый байт
     30a:	03 96       	adiw	r24, 0x03	; 3
     30c:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a0 e0       	ldi	r26, 0x00	; 0
     314:	b0 e0       	ldi	r27, 0x00	; 0
     receive_data = receive_data << 8;                        // сдвинули освободив место под младший
     316:	ba 2f       	mov	r27, r26
     318:	a9 2f       	mov	r26, r25
     31a:	98 2f       	mov	r25, r24
     31c:	88 27       	eor	r24, r24
     31e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_ZZ15EEPROM_read_32tjE12receive_data>
     322:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <_ZZ15EEPROM_read_32tjE12receive_data+0x1>
     326:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <_ZZ15EEPROM_read_32tjE12receive_data+0x2>
     32a:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <_ZZ15EEPROM_read_32tjE12receive_data+0x3>
     receive_data |= EEPROM_read (uiAddress+0x02);            // считали второй байт и присвоили без изменени€ других битов
     32e:	ce 01       	movw	r24, r28
     330:	02 96       	adiw	r24, 0x02	; 2
     332:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     336:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <_ZZ15EEPROM_read_32tjE12receive_data>
     33a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <_ZZ15EEPROM_read_32tjE12receive_data+0x1>
     33e:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <_ZZ15EEPROM_read_32tjE12receive_data+0x2>
     342:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <_ZZ15EEPROM_read_32tjE12receive_data+0x3>
     346:	48 2b       	or	r20, r24
     receive_data = receive_data << 8;                        // сдвинули
     348:	76 2f       	mov	r23, r22
     34a:	65 2f       	mov	r22, r21
     34c:	54 2f       	mov	r21, r20
     34e:	44 27       	eor	r20, r20
     350:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <_ZZ15EEPROM_read_32tjE12receive_data>
     354:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <_ZZ15EEPROM_read_32tjE12receive_data+0x1>
     358:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_ZZ15EEPROM_read_32tjE12receive_data+0x2>
     35c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_ZZ15EEPROM_read_32tjE12receive_data+0x3>
     receive_data |= EEPROM_read (uiAddress+0x01);
     360:	ce 01       	movw	r24, r28
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     368:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <_ZZ15EEPROM_read_32tjE12receive_data>
     36c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <_ZZ15EEPROM_read_32tjE12receive_data+0x1>
     370:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <_ZZ15EEPROM_read_32tjE12receive_data+0x2>
     374:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <_ZZ15EEPROM_read_32tjE12receive_data+0x3>
     378:	48 2b       	or	r20, r24
     receive_data = receive_data << 8;
     37a:	76 2f       	mov	r23, r22
     37c:	65 2f       	mov	r22, r21
     37e:	54 2f       	mov	r21, r20
     380:	44 27       	eor	r20, r20
     382:	40 93 0e 01 	sts	0x010E, r20	; 0x80010e <_ZZ15EEPROM_read_32tjE12receive_data>
     386:	50 93 0f 01 	sts	0x010F, r21	; 0x80010f <_ZZ15EEPROM_read_32tjE12receive_data+0x1>
     38a:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_ZZ15EEPROM_read_32tjE12receive_data+0x2>
     38e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_ZZ15EEPROM_read_32tjE12receive_data+0x3>
     receive_data |= EEPROM_read (uiAddress);
     392:	ce 01       	movw	r24, r28
     394:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     398:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <_ZZ15EEPROM_read_32tjE12receive_data>
     39c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <_ZZ15EEPROM_read_32tjE12receive_data+0x1>
     3a0:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <_ZZ15EEPROM_read_32tjE12receive_data+0x2>
     3a4:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <_ZZ15EEPROM_read_32tjE12receive_data+0x3>
     3a8:	8a 01       	movw	r16, r20
     3aa:	9b 01       	movw	r18, r22
     3ac:	08 2b       	or	r16, r24
     3ae:	c9 01       	movw	r24, r18
     3b0:	b8 01       	movw	r22, r16
     3b2:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <_ZZ15EEPROM_read_32tjE12receive_data>
     3b6:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <_ZZ15EEPROM_read_32tjE12receive_data+0x1>
     3ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZZ15EEPROM_read_32tjE12receive_data+0x2>
     3be:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZZ15EEPROM_read_32tjE12receive_data+0x3>
     return receive_data;                                     // вернули итог
}
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	08 95       	ret

000003cc <_Z16EEPROM_write_32tjm>:

void EEPROM_write_32t (uint16_t uiAddress, uint32_t ucData)   // запись 32 битного числа
{
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	ec 01       	movw	r28, r24
     3da:	6a 01       	movw	r12, r20
     3dc:	7b 01       	movw	r14, r22
     EEPROM_write (uiAddress,ucData);                          // в обратном пор€дке складываем в пам€ть
     3de:	64 2f       	mov	r22, r20
     3e0:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write (uiAddress + 0x01 ,ucData >> 8);
     3e4:	99 27       	eor	r25, r25
     3e6:	8f 2d       	mov	r24, r15
     3e8:	7e 2d       	mov	r23, r14
     3ea:	6d 2d       	mov	r22, r13
     3ec:	ce 01       	movw	r24, r28
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write (uiAddress + 0x02 ,ucData >> 16);
     3f4:	b7 01       	movw	r22, r14
     3f6:	88 27       	eor	r24, r24
     3f8:	99 27       	eor	r25, r25
     3fa:	ce 01       	movw	r24, r28
     3fc:	02 96       	adiw	r24, 0x02	; 2
     3fe:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write (uiAddress + 0x03 ,ucData >> 24);
     402:	6f 2d       	mov	r22, r15
     404:	77 27       	eor	r23, r23
     406:	88 27       	eor	r24, r24
     408:	99 27       	eor	r25, r25
     40a:	ce 01       	movw	r24, r28
     40c:	03 96       	adiw	r24, 0x03	; 3
     40e:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	08 95       	ret

00000420 <_Z18EEPROM_write_floatjd>:

void EEPROM_write_float (uint16_t uiAddress, double ucData)        // запись float.
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
     static union                                                  // создаем объеденение
     {
          double in_float;                                          // два числа которые начинаютс€ с одного адресса но имеют разный тип
          uint32_t out_float;                                       // мы флоат записываем как флоат, а потом при записи в еепром уже пользуемс€ 32 бит переменной
     }floatchik;
     floatchik.in_float = ucData;
     426:	84 2f       	mov	r24, r20
     428:	95 2f       	mov	r25, r21
     42a:	a6 2f       	mov	r26, r22
     42c:	b7 2f       	mov	r27, r23
     42e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZZ18EEPROM_write_floatjdE9floatchik>
     432:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZZ18EEPROM_write_floatjdE9floatchik+0x1>
     436:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <_ZZ18EEPROM_write_floatjdE9floatchik+0x2>
     43a:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <_ZZ18EEPROM_write_floatjdE9floatchik+0x3>
     EEPROM_write (uiAddress,floatchik.out_float);                          // в обратном пор€дке складываем в пам€ть
     43e:	64 2f       	mov	r22, r20
     440:	ce 01       	movw	r24, r28
     442:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write (uiAddress + 0x01 ,floatchik.out_float >> 8);
     446:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ18EEPROM_write_floatjdE9floatchik>
     44a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ18EEPROM_write_floatjdE9floatchik+0x1>
     44e:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_ZZ18EEPROM_write_floatjdE9floatchik+0x2>
     452:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_ZZ18EEPROM_write_floatjdE9floatchik+0x3>
     456:	69 2f       	mov	r22, r25
     458:	7a 2f       	mov	r23, r26
     45a:	8b 2f       	mov	r24, r27
     45c:	99 27       	eor	r25, r25
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write (uiAddress + 0x02 ,floatchik.out_float >> 16);
     466:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ18EEPROM_write_floatjdE9floatchik>
     46a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ18EEPROM_write_floatjdE9floatchik+0x1>
     46e:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_ZZ18EEPROM_write_floatjdE9floatchik+0x2>
     472:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_ZZ18EEPROM_write_floatjdE9floatchik+0x3>
     476:	bd 01       	movw	r22, r26
     478:	88 27       	eor	r24, r24
     47a:	99 27       	eor	r25, r25
     47c:	ce 01       	movw	r24, r28
     47e:	02 96       	adiw	r24, 0x02	; 2
     480:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write (uiAddress + 0x03 ,floatchik.out_float >> 24);
     484:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_ZZ18EEPROM_write_floatjdE9floatchik>
     488:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_ZZ18EEPROM_write_floatjdE9floatchik+0x1>
     48c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_ZZ18EEPROM_write_floatjdE9floatchik+0x2>
     490:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_ZZ18EEPROM_write_floatjdE9floatchik+0x3>
     494:	6b 2f       	mov	r22, r27
     496:	77 27       	eor	r23, r23
     498:	88 27       	eor	r24, r24
     49a:	99 27       	eor	r25, r25
     49c:	ce 01       	movw	r24, r28
     49e:	03 96       	adiw	r24, 0x03	; 3
     4a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <_Z17EEPROM_read_floatj>:

double EEPROM_read_float (uint16_t uiAddress)                       // вычитываем float
{
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	ec 01       	movw	r28, r24
     static union                                                   // так же само, создаем объеденение, и обращаемс€ к одним и тем же данным по разному
     {
          double in_float;
          uint32_t out_float;
     }floatchik;
     floatchik.out_float = EEPROM_read (uiAddress+0x03);                // считали в нее старшый байт
     4b4:	03 96       	adiw	r24, 0x03	; 3
     4b6:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     floatchik.out_float = floatchik.out_float << 8;                    // сдвинули освободив место под младший
     4c0:	ba 2f       	mov	r27, r26
     4c2:	a9 2f       	mov	r26, r25
     4c4:	98 2f       	mov	r25, r24
     4c6:	88 27       	eor	r24, r24
     4c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZZ17EEPROM_read_floatjE9floatchik>
     4cc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZZ17EEPROM_read_floatjE9floatchik+0x1>
     4d0:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZZ17EEPROM_read_floatjE9floatchik+0x2>
     4d4:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZZ17EEPROM_read_floatjE9floatchik+0x3>
     floatchik.out_float |= EEPROM_read (uiAddress+0x02);               // считали второй байт и присвоили без изменени€ других битов
     4d8:	ce 01       	movw	r24, r28
     4da:	02 96       	adiw	r24, 0x02	; 2
     4dc:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     4e0:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZZ17EEPROM_read_floatjE9floatchik>
     4e4:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZZ17EEPROM_read_floatjE9floatchik+0x1>
     4e8:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZZ17EEPROM_read_floatjE9floatchik+0x2>
     4ec:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZZ17EEPROM_read_floatjE9floatchik+0x3>
     4f0:	48 2b       	or	r20, r24
     floatchik.out_float = floatchik.out_float << 8;                    // сдвинули
     4f2:	76 2f       	mov	r23, r22
     4f4:	65 2f       	mov	r22, r21
     4f6:	54 2f       	mov	r21, r20
     4f8:	44 27       	eor	r20, r20
     4fa:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <_ZZ17EEPROM_read_floatjE9floatchik>
     4fe:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <_ZZ17EEPROM_read_floatjE9floatchik+0x1>
     502:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_ZZ17EEPROM_read_floatjE9floatchik+0x2>
     506:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_ZZ17EEPROM_read_floatjE9floatchik+0x3>
     floatchik.out_float |= EEPROM_read (uiAddress+0x01);
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     512:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZZ17EEPROM_read_floatjE9floatchik>
     516:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZZ17EEPROM_read_floatjE9floatchik+0x1>
     51a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZZ17EEPROM_read_floatjE9floatchik+0x2>
     51e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZZ17EEPROM_read_floatjE9floatchik+0x3>
     522:	48 2b       	or	r20, r24
     floatchik.out_float = floatchik.out_float << 8;
     524:	76 2f       	mov	r23, r22
     526:	65 2f       	mov	r22, r21
     528:	54 2f       	mov	r21, r20
     52a:	44 27       	eor	r20, r20
     52c:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <_ZZ17EEPROM_read_floatjE9floatchik>
     530:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <_ZZ17EEPROM_read_floatjE9floatchik+0x1>
     534:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <_ZZ17EEPROM_read_floatjE9floatchik+0x2>
     538:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <_ZZ17EEPROM_read_floatjE9floatchik+0x3>
     floatchik.out_float |= EEPROM_read (uiAddress);
     53c:	ce 01       	movw	r24, r28
     53e:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     542:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZZ17EEPROM_read_floatjE9floatchik>
     546:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZZ17EEPROM_read_floatjE9floatchik+0x1>
     54a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZZ17EEPROM_read_floatjE9floatchik+0x2>
     54e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZZ17EEPROM_read_floatjE9floatchik+0x3>
     552:	8a 01       	movw	r16, r20
     554:	9b 01       	movw	r18, r22
     556:	08 2b       	or	r16, r24
     558:	c9 01       	movw	r24, r18
     55a:	b8 01       	movw	r22, r16
     55c:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <_ZZ17EEPROM_read_floatjE9floatchik>
     560:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <_ZZ17EEPROM_read_floatjE9floatchik+0x1>
     564:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ17EEPROM_read_floatjE9floatchik+0x2>
     568:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZZ17EEPROM_read_floatjE9floatchik+0x3>
     return floatchik.in_float;                                         // вернули итог типа флоат
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <_Z15EEPROM_read_16tj>:

uint16_t EEPROM_read_16t (uint16_t uiAddress)                 // тоже самое только дл€ 16 бит
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	ec 01       	movw	r28, r24
     static uint16_t receive_data;
     receive_data = EEPROM_read (uiAddress+0x01);
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     receive_data = receive_data << 8;
     582:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_ZZ15EEPROM_read_16tjE12receive_data>
     586:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_ZZ15EEPROM_read_16tjE12receive_data+0x1>
     receive_data |= EEPROM_read (uiAddress);
     58a:	ce 01       	movw	r24, r28
     58c:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     590:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <_ZZ15EEPROM_read_16tjE12receive_data>
     594:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <_ZZ15EEPROM_read_16tjE12receive_data+0x1>
     598:	a9 01       	movw	r20, r18
     59a:	48 2b       	or	r20, r24
     59c:	ca 01       	movw	r24, r20
     59e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZZ15EEPROM_read_16tjE12receive_data+0x1>
     5a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZZ15EEPROM_read_16tjE12receive_data>
     return receive_data;
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <_Z16EEPROM_write_16tjj>:

void EEPROM_write_16t (uint16_t uiAddress, uint16_t ucData)
{
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	ec 01       	movw	r28, r24
     5b4:	17 2f       	mov	r17, r23
     EEPROM_write (uiAddress,ucData);
     5b6:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write (uiAddress + 0x01 ,ucData >> 8);
     5ba:	61 2f       	mov	r22, r17
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	08 95       	ret

000005cc <_Z11init_EEpromv>:


void init_EEprom (void)                                       // инициализаци€ еепром, забиваем стандартные значени€
{
     EEPROM_write(EE_AMOUNT_ADC,4);
     5cc:	64 e0       	ldi	r22, 0x04	; 4
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write(EE_FILTR,5);
     5d6:	65 e0       	ldi	r22, 0x05	; 5
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
     EEPROM_write(EE_DISKRET,20);
     5e0:	64 e1       	ldi	r22, 0x14	; 20
     5e2:	80 e2       	ldi	r24, 0x20	; 32
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
      //----------metrology----------//
     EEPROM_write_float(EE_K_KOEF1,1.000);
     5ea:	40 e0       	ldi	r20, 0x00	; 0
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	60 e8       	ldi	r22, 0x80	; 128
     5f0:	7f e3       	ldi	r23, 0x3F	; 63
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_float(EE_K_KOEF2,1.000);
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 e8       	ldi	r22, 0x80	; 128
     600:	7f e3       	ldi	r23, 0x3F	; 63
     602:	86 e0       	ldi	r24, 0x06	; 6
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_float(EE_K_KOEF3,1.000);
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	60 e8       	ldi	r22, 0x80	; 128
     610:	7f e3       	ldi	r23, 0x3F	; 63
     612:	8a e0       	ldi	r24, 0x0A	; 10
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_float(EE_K_KOEF4,1.000);  
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e8       	ldi	r22, 0x80	; 128
     620:	7f e3       	ldi	r23, 0x3F	; 63
     622:	8e e0       	ldi	r24, 0x0E	; 14
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_float(EE_K_KOEF4_1,1.000);
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	60 e8       	ldi	r22, 0x80	; 128
     630:	7f e3       	ldi	r23, 0x3F	; 63
     632:	81 e2       	ldi	r24, 0x21	; 33
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_float(EE_K_KOEF4_2,1.000);
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 e8       	ldi	r22, 0x80	; 128
     640:	7f e3       	ldi	r23, 0x3F	; 63
     642:	85 e2       	ldi	r24, 0x25	; 37
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_float(EE_K_KOEF4_3,1.000);
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	60 e8       	ldi	r22, 0x80	; 128
     650:	7f e3       	ldi	r23, 0x3F	; 63
     652:	89 e2       	ldi	r24, 0x29	; 41
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_float(EE_K_KOEF4_4,1.000);
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	60 e8       	ldi	r22, 0x80	; 128
     660:	7f e3       	ldi	r23, 0x3F	; 63
     662:	8d e2       	ldi	r24, 0x2D	; 45
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_float(EE_K_KOEF4_5,1.000);
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	60 e8       	ldi	r22, 0x80	; 128
     670:	7f e3       	ldi	r23, 0x3F	; 63
     672:	89 e3       	ldi	r24, 0x39	; 57
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
     EEPROM_write_32t(EE_TARA, 5000);
     67a:	48 e8       	ldi	r20, 0x88	; 136
     67c:	53 e1       	ldi	r21, 0x13	; 19
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	81 e3       	ldi	r24, 0x31	; 49
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
     EEPROM_write_16t (EE_ZERO_ADC1,10);
     68a:	6a e0       	ldi	r22, 0x0A	; 10
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	82 e1       	ldi	r24, 0x12	; 18
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z16EEPROM_write_16tjj>
     EEPROM_write_16t (EE_ZERO_ADC2,10);
     696:	6a e0       	ldi	r22, 0x0A	; 10
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	84 e1       	ldi	r24, 0x14	; 20
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z16EEPROM_write_16tjj>
     EEPROM_write_16t (EE_ZERO_ADC3,10);
     6a2:	6a e0       	ldi	r22, 0x0A	; 10
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	86 e1       	ldi	r24, 0x16	; 22
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z16EEPROM_write_16tjj>
     EEPROM_write_16t (EE_ZERO_ADC4,10);
     6ae:	6a e0       	ldi	r22, 0x0A	; 10
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	88 e1       	ldi	r24, 0x18	; 24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z16EEPROM_write_16tjj>
     EEPROM_write_32t(EE_NUMBER_KK4,1);
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	85 e3       	ldi	r24, 0x35	; 53
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_ZERO_AX,0);
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	ba 01       	movw	r22, r20
     6d0:	8d e3       	ldi	r24, 0x3D	; 61
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
//------------обновление Nextion--------//
     EEPROM_write_32t(EE_CELL0,0);
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	ba 01       	movw	r22, r20
     6de:	81 e4       	ldi	r24, 0x41	; 65
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL1,0);
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	ba 01       	movw	r22, r20
     6ec:	85 e4       	ldi	r24, 0x45	; 69
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL2,0);
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	ba 01       	movw	r22, r20
     6fa:	89 e4       	ldi	r24, 0x49	; 73
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL3,0);
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	ba 01       	movw	r22, r20
     708:	8d e4       	ldi	r24, 0x4D	; 77
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL4,0);
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	ba 01       	movw	r22, r20
     716:	81 e5       	ldi	r24, 0x51	; 81
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL5,0);
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	ba 01       	movw	r22, r20
     724:	85 e5       	ldi	r24, 0x55	; 85
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL6,0);
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	ba 01       	movw	r22, r20
     732:	89 e5       	ldi	r24, 0x59	; 89
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL7,0);
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	ba 01       	movw	r22, r20
     740:	8d e5       	ldi	r24, 0x5D	; 93
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL8,0);
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	ba 01       	movw	r22, r20
     74e:	81 e6       	ldi	r24, 0x61	; 97
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
	 EEPROM_write_32t(EE_CELL9,0);
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	ba 01       	movw	r22, r20
     75c:	85 e6       	ldi	r24, 0x65	; 101
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
     764:	08 95       	ret

00000766 <__vector_1>:

char send_adc_data [20];



ISR(INT0_vect){
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	8f 93       	push	r24
	boolean.go = true;
     772:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <boolean>
     776:	81 60       	ori	r24, 0x01	; 1
     778:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <boolean>
}
     77c:	8f 91       	pop	r24
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <_Z11init_atmegav>:
	in_float = 0;
}

void init_atmega (void) {
	//--инициализируем порты-- //
	DDRB = 0x29;
     788:	89 e2       	ldi	r24, 0x29	; 41
     78a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x09;
     78c:	89 e0       	ldi	r24, 0x09	; 9
     78e:	85 b9       	out	0x05, r24	; 5

	//--инициализируем прерывание -- INT1//
	EICRA = 0x03;            // EICRA = 0x03 прерывание по нарастанию. EICRA = 0x02 прерывание по спаду. EICRA = 0x01 по любому изменению
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0x01;	          // разрешить прерывание INT1
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	8d bb       	out	0x1d, r24	; 29
	//--инициализируем таймер 0//
	TCCR0B = 0x01;          // делитель 0 на таймер 0       62 K√ерц
     79a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x01;          // включить прерывани€ по переполнению
     79c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	sei ();
     7a0:	78 94       	sei
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
     7a2:	9e e0       	ldi	r25, 0x0E	; 14
     7a4:	88 e1       	ldi	r24, 0x18	; 24
     7a6:	0f b6       	in	r0, 0x3f	; 63
     7a8:	f8 94       	cli
     7aa:	a8 95       	wdr
     7ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7b6:	08 95       	ret

000007b8 <_Z15read_ALL_EEpromv>:
	wdt_enable(WDTO_1S);
}

void read_ALL_EEprom (void)                                   // считываем значение из еепром при старте дл€ всех переменных
{
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
	setting.amount_adc          = EEPROM_read(EE_AMOUNT_ADC);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     7c8:	cb ef       	ldi	r28, 0xFB	; 251
     7ca:	d3 e0       	ldi	r29, 0x03	; 3
     7cc:	88 83       	st	Y, r24
	setting.filtr               = EEPROM_read(EE_FILTR);
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     7d6:	89 83       	std	Y+1, r24	; 0x01
	setting.disreta             = EEPROM_read(EE_DISKRET);
     7d8:	80 e2       	ldi	r24, 0x20	; 32
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 75 01 	call	0x2ea	; 0x2ea <_Z11EEPROM_readj>
     7e0:	8a 83       	std	Y+2, r24	; 0x02
	setting.number_kk_4         = EEPROM_read_32t(EE_NUMBER_KK4);
     7e2:	85 e3       	ldi	r24, 0x35	; 53
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     7ea:	6b 83       	std	Y+3, r22	; 0x03
     7ec:	7c 83       	std	Y+4, r23	; 0x04
     7ee:	8d 83       	std	Y+5, r24	; 0x05
     7f0:	9e 83       	std	Y+6, r25	; 0x06
	setting.kal_koef1           = EEPROM_read_float(EE_K_KOEF1);
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     7fa:	6f 87       	std	Y+15, r22	; 0x0f
     7fc:	78 8b       	std	Y+16, r23	; 0x10
     7fe:	89 8b       	std	Y+17, r24	; 0x11
     800:	9a 8b       	std	Y+18, r25	; 0x12
	setting.kal_koef2           = EEPROM_read_float(EE_K_KOEF2);
     802:	86 e0       	ldi	r24, 0x06	; 6
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     80a:	6b 8b       	std	Y+19, r22	; 0x13
     80c:	7c 8b       	std	Y+20, r23	; 0x14
     80e:	8d 8b       	std	Y+21, r24	; 0x15
     810:	9e 8b       	std	Y+22, r25	; 0x16
	setting.kal_koef3           = EEPROM_read_float(EE_K_KOEF3);
     812:	8a e0       	ldi	r24, 0x0A	; 10
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     81a:	6f 8b       	std	Y+23, r22	; 0x17
     81c:	78 8f       	std	Y+24, r23	; 0x18
     81e:	89 8f       	std	Y+25, r24	; 0x19
     820:	9a 8f       	std	Y+26, r25	; 0x1a
	setting.kal_koef4           = EEPROM_read_float(EE_K_KOEF4);
     822:	8e e0       	ldi	r24, 0x0E	; 14
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     82a:	6b 8f       	std	Y+27, r22	; 0x1b
     82c:	7c 8f       	std	Y+28, r23	; 0x1c
     82e:	8d 8f       	std	Y+29, r24	; 0x1d
     830:	9e 8f       	std	Y+30, r25	; 0x1e
	setting.kal_koef4_1         = EEPROM_read_float(EE_K_KOEF4_1);      // нужны ли эти переменные 4шт???
     832:	81 e2       	ldi	r24, 0x21	; 33
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     83a:	6f 8f       	std	Y+31, r22	; 0x1f
     83c:	78 a3       	std	Y+32, r23	; 0x20
     83e:	89 a3       	std	Y+33, r24	; 0x21
     840:	9a a3       	std	Y+34, r25	; 0x22
	setting.kal_koef4_2         = EEPROM_read_float(EE_K_KOEF4_2);
     842:	85 e2       	ldi	r24, 0x25	; 37
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     84a:	6b a3       	std	Y+35, r22	; 0x23
     84c:	7c a3       	std	Y+36, r23	; 0x24
     84e:	8d a3       	std	Y+37, r24	; 0x25
     850:	9e a3       	std	Y+38, r25	; 0x26
	setting.kal_koef4_3         = EEPROM_read_float(EE_K_KOEF4_3);
     852:	89 e2       	ldi	r24, 0x29	; 41
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     85a:	6f a3       	std	Y+39, r22	; 0x27
     85c:	78 a7       	std	Y+40, r23	; 0x28
     85e:	89 a7       	std	Y+41, r24	; 0x29
     860:	9a a7       	std	Y+42, r25	; 0x2a
	setting.kal_koef4_4         = EEPROM_read_float(EE_K_KOEF4_4);
     862:	8d e2       	ldi	r24, 0x2D	; 45
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     86a:	6b a7       	std	Y+43, r22	; 0x2b
     86c:	7c a7       	std	Y+44, r23	; 0x2c
     86e:	8d a7       	std	Y+45, r24	; 0x2d
     870:	9e a7       	std	Y+46, r25	; 0x2e
	setting.kal_koef4_5         = EEPROM_read_float(EE_K_KOEF4_5);
     872:	89 e3       	ldi	r24, 0x39	; 57
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 55 02 	call	0x4aa	; 0x4aa <_Z17EEPROM_read_floatj>
     87a:	6f a7       	std	Y+47, r22	; 0x2f
     87c:	78 ab       	std	Y+48, r23	; 0x30
     87e:	89 ab       	std	Y+49, r24	; 0x31
     880:	9a ab       	std	Y+50, r25	; 0x32
	setting.tara                = EEPROM_read_32t(EE_TARA);
     882:	81 e3       	ldi	r24, 0x31	; 49
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     88a:	6f 83       	std	Y+7, r22	; 0x07
     88c:	78 87       	std	Y+8, r23	; 0x08
     88e:	89 87       	std	Y+9, r24	; 0x09
     890:	9a 87       	std	Y+10, r25	; 0x0a
	setting.zero_ax             = EEPROM_read_32t(EE_ZERO_AX);
     892:	8d e3       	ldi	r24, 0x3D	; 61
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     89a:	6b 87       	std	Y+11, r22	; 0x0b
     89c:	7c 87       	std	Y+12, r23	; 0x0c
     89e:	8d 87       	std	Y+13, r24	; 0x0d
     8a0:	9e 87       	std	Y+14, r25	; 0x0e
	adc_data.zero_adc1          = EEPROM_read_16t (EE_ZERO_ADC1);
     8a2:	82 e1       	ldi	r24, 0x12	; 18
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 bb 02 	call	0x576	; 0x576 <_Z15EEPROM_read_16tj>
     8aa:	0e e2       	ldi	r16, 0x2E	; 46
     8ac:	14 e0       	ldi	r17, 0x04	; 4
     8ae:	f8 01       	movw	r30, r16
     8b0:	91 a7       	std	Z+41, r25	; 0x29
     8b2:	80 a7       	std	Z+40, r24	; 0x28
	adc_data.zero_adc2          = EEPROM_read_16t (EE_ZERO_ADC2);
     8b4:	84 e1       	ldi	r24, 0x14	; 20
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 bb 02 	call	0x576	; 0x576 <_Z15EEPROM_read_16tj>
     8bc:	f8 01       	movw	r30, r16
     8be:	93 a7       	std	Z+43, r25	; 0x2b
     8c0:	82 a7       	std	Z+42, r24	; 0x2a
	adc_data.zero_adc3          = EEPROM_read_16t (EE_ZERO_ADC3);
     8c2:	86 e1       	ldi	r24, 0x16	; 22
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 bb 02 	call	0x576	; 0x576 <_Z15EEPROM_read_16tj>
     8ca:	f8 01       	movw	r30, r16
     8cc:	95 a7       	std	Z+45, r25	; 0x2d
     8ce:	84 a7       	std	Z+44, r24	; 0x2c
	adc_data.zero_adc4          = EEPROM_read_16t (EE_ZERO_ADC4);
     8d0:	88 e1       	ldi	r24, 0x18	; 24
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 bb 02 	call	0x576	; 0x576 <_Z15EEPROM_read_16tj>
     8d8:	f8 01       	movw	r30, r16
     8da:	97 a7       	std	Z+47, r25	; 0x2f
     8dc:	86 a7       	std	Z+46, r24	; 0x2e
	//------------обновление Nextion--------//
	cell_struct.cell0           = EEPROM_read_32t(EE_CELL0);
     8de:	81 e4       	ldi	r24, 0x41	; 65
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     8e6:	03 ed       	ldi	r16, 0xD3	; 211
     8e8:	13 e0       	ldi	r17, 0x03	; 3
     8ea:	f8 01       	movw	r30, r16
     8ec:	60 83       	st	Z, r22
     8ee:	71 83       	std	Z+1, r23	; 0x01
     8f0:	82 83       	std	Z+2, r24	; 0x02
     8f2:	93 83       	std	Z+3, r25	; 0x03
	cell_struct.cell1           = EEPROM_read_32t(EE_CELL1);
     8f4:	85 e4       	ldi	r24, 0x45	; 69
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     8fc:	f8 01       	movw	r30, r16
     8fe:	64 83       	std	Z+4, r22	; 0x04
     900:	75 83       	std	Z+5, r23	; 0x05
     902:	86 83       	std	Z+6, r24	; 0x06
     904:	97 83       	std	Z+7, r25	; 0x07
	cell_struct.cell2           = EEPROM_read_32t(EE_CELL2);
     906:	89 e4       	ldi	r24, 0x49	; 73
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     90e:	f8 01       	movw	r30, r16
     910:	60 87       	std	Z+8, r22	; 0x08
     912:	71 87       	std	Z+9, r23	; 0x09
     914:	82 87       	std	Z+10, r24	; 0x0a
     916:	93 87       	std	Z+11, r25	; 0x0b
	cell_struct.cell3           = EEPROM_read_32t(EE_CELL3);
     918:	8d e4       	ldi	r24, 0x4D	; 77
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     920:	f8 01       	movw	r30, r16
     922:	64 87       	std	Z+12, r22	; 0x0c
     924:	75 87       	std	Z+13, r23	; 0x0d
     926:	86 87       	std	Z+14, r24	; 0x0e
     928:	97 87       	std	Z+15, r25	; 0x0f
	cell_struct.cell4           = EEPROM_read_32t(EE_CELL4);
     92a:	81 e5       	ldi	r24, 0x51	; 81
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     932:	f8 01       	movw	r30, r16
     934:	60 8b       	std	Z+16, r22	; 0x10
     936:	71 8b       	std	Z+17, r23	; 0x11
     938:	82 8b       	std	Z+18, r24	; 0x12
     93a:	93 8b       	std	Z+19, r25	; 0x13
	cell_struct.cell5           = EEPROM_read_32t(EE_CELL5);
     93c:	85 e5       	ldi	r24, 0x55	; 85
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     944:	f8 01       	movw	r30, r16
     946:	64 8b       	std	Z+20, r22	; 0x14
     948:	75 8b       	std	Z+21, r23	; 0x15
     94a:	86 8b       	std	Z+22, r24	; 0x16
     94c:	97 8b       	std	Z+23, r25	; 0x17
	cell_struct.cell6           = EEPROM_read_32t(EE_CELL6);
     94e:	89 e5       	ldi	r24, 0x59	; 89
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     956:	f8 01       	movw	r30, r16
     958:	60 8f       	std	Z+24, r22	; 0x18
     95a:	71 8f       	std	Z+25, r23	; 0x19
     95c:	82 8f       	std	Z+26, r24	; 0x1a
     95e:	93 8f       	std	Z+27, r25	; 0x1b
	cell_struct.cell7           = EEPROM_read_32t(EE_CELL7);
     960:	8d e5       	ldi	r24, 0x5D	; 93
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     968:	f8 01       	movw	r30, r16
     96a:	64 8f       	std	Z+28, r22	; 0x1c
     96c:	75 8f       	std	Z+29, r23	; 0x1d
     96e:	86 8f       	std	Z+30, r24	; 0x1e
     970:	97 8f       	std	Z+31, r25	; 0x1f
	cell_struct.cell8           = EEPROM_read_32t(EE_CELL8);
     972:	81 e6       	ldi	r24, 0x61	; 97
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     97a:	f8 01       	movw	r30, r16
     97c:	60 a3       	std	Z+32, r22	; 0x20
     97e:	71 a3       	std	Z+33, r23	; 0x21
     980:	82 a3       	std	Z+34, r24	; 0x22
     982:	93 a3       	std	Z+35, r25	; 0x23
	cell_struct.cell9           = EEPROM_read_32t(EE_CELL9);
     984:	85 e6       	ldi	r24, 0x65	; 101
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 80 01 	call	0x300	; 0x300 <_Z15EEPROM_read_32tj>
     98c:	f8 01       	movw	r30, r16
     98e:	64 a3       	std	Z+36, r22	; 0x24
     990:	75 a3       	std	Z+37, r23	; 0x25
     992:	86 a3       	std	Z+38, r24	; 0x26
     994:	97 a3       	std	Z+39, r25	; 0x27

	
	switch (setting.number_kk_4){                                      // после чтени€ сразу установим нужный параметр
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	ad 81       	ldd	r26, Y+5	; 0x05
     99c:	be 81       	ldd	r27, Y+6	; 0x06
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	91 05       	cpc	r25, r1
     9a2:	a1 05       	cpc	r26, r1
     9a4:	b1 05       	cpc	r27, r1
     9a6:	59 f1       	breq	.+86     	; 0x9fe <__stack+0xff>
     9a8:	54 f4       	brge	.+20     	; 0x9be <__stack+0xbf>
     9aa:	81 30       	cpi	r24, 0x01	; 1
     9ac:	91 05       	cpc	r25, r1
     9ae:	a1 05       	cpc	r26, r1
     9b0:	b1 05       	cpc	r27, r1
     9b2:	79 f0       	breq	.+30     	; 0x9d2 <__stack+0xd3>
     9b4:	02 97       	sbiw	r24, 0x02	; 2
     9b6:	a1 05       	cpc	r26, r1
     9b8:	b1 05       	cpc	r27, r1
     9ba:	b1 f0       	breq	.+44     	; 0x9e8 <__stack+0xe9>
     9bc:	40 c0       	rjmp	.+128    	; 0xa3e <__stack+0x13f>
     9be:	84 30       	cpi	r24, 0x04	; 4
     9c0:	91 05       	cpc	r25, r1
     9c2:	a1 05       	cpc	r26, r1
     9c4:	b1 05       	cpc	r27, r1
     9c6:	31 f1       	breq	.+76     	; 0xa14 <__stack+0x115>
     9c8:	05 97       	sbiw	r24, 0x05	; 5
     9ca:	a1 05       	cpc	r26, r1
     9cc:	b1 05       	cpc	r27, r1
     9ce:	69 f1       	breq	.+90     	; 0xa2a <__stack+0x12b>
     9d0:	36 c0       	rjmp	.+108    	; 0xa3e <__stack+0x13f>
		case 1:
		setting.kal_koef4 = setting.kal_koef4_1;
     9d2:	eb ef       	ldi	r30, 0xFB	; 251
     9d4:	f3 e0       	ldi	r31, 0x03	; 3
     9d6:	87 8d       	ldd	r24, Z+31	; 0x1f
     9d8:	90 a1       	ldd	r25, Z+32	; 0x20
     9da:	a1 a1       	ldd	r26, Z+33	; 0x21
     9dc:	b2 a1       	ldd	r27, Z+34	; 0x22
     9de:	83 8f       	std	Z+27, r24	; 0x1b
     9e0:	94 8f       	std	Z+28, r25	; 0x1c
     9e2:	a5 8f       	std	Z+29, r26	; 0x1d
     9e4:	b6 8f       	std	Z+30, r27	; 0x1e
		break;
     9e6:	2b c0       	rjmp	.+86     	; 0xa3e <__stack+0x13f>
		case 2:
		setting.kal_koef4 = setting.kal_koef4_2;
     9e8:	eb ef       	ldi	r30, 0xFB	; 251
     9ea:	f3 e0       	ldi	r31, 0x03	; 3
     9ec:	83 a1       	ldd	r24, Z+35	; 0x23
     9ee:	94 a1       	ldd	r25, Z+36	; 0x24
     9f0:	a5 a1       	ldd	r26, Z+37	; 0x25
     9f2:	b6 a1       	ldd	r27, Z+38	; 0x26
     9f4:	83 8f       	std	Z+27, r24	; 0x1b
     9f6:	94 8f       	std	Z+28, r25	; 0x1c
     9f8:	a5 8f       	std	Z+29, r26	; 0x1d
     9fa:	b6 8f       	std	Z+30, r27	; 0x1e
		break;
     9fc:	20 c0       	rjmp	.+64     	; 0xa3e <__stack+0x13f>
		case 3:
		setting.kal_koef4 = setting.kal_koef4_3;
     9fe:	eb ef       	ldi	r30, 0xFB	; 251
     a00:	f3 e0       	ldi	r31, 0x03	; 3
     a02:	87 a1       	ldd	r24, Z+39	; 0x27
     a04:	90 a5       	ldd	r25, Z+40	; 0x28
     a06:	a1 a5       	ldd	r26, Z+41	; 0x29
     a08:	b2 a5       	ldd	r27, Z+42	; 0x2a
     a0a:	83 8f       	std	Z+27, r24	; 0x1b
     a0c:	94 8f       	std	Z+28, r25	; 0x1c
     a0e:	a5 8f       	std	Z+29, r26	; 0x1d
     a10:	b6 8f       	std	Z+30, r27	; 0x1e
		break;
     a12:	15 c0       	rjmp	.+42     	; 0xa3e <__stack+0x13f>
		case 4:
		setting.kal_koef4 = setting.kal_koef4_4;
     a14:	eb ef       	ldi	r30, 0xFB	; 251
     a16:	f3 e0       	ldi	r31, 0x03	; 3
     a18:	83 a5       	ldd	r24, Z+43	; 0x2b
     a1a:	94 a5       	ldd	r25, Z+44	; 0x2c
     a1c:	a5 a5       	ldd	r26, Z+45	; 0x2d
     a1e:	b6 a5       	ldd	r27, Z+46	; 0x2e
     a20:	83 8f       	std	Z+27, r24	; 0x1b
     a22:	94 8f       	std	Z+28, r25	; 0x1c
     a24:	a5 8f       	std	Z+29, r26	; 0x1d
     a26:	b6 8f       	std	Z+30, r27	; 0x1e
		break;
     a28:	0a c0       	rjmp	.+20     	; 0xa3e <__stack+0x13f>
		case 5:
		setting.kal_koef4 = setting.kal_koef4_5;
     a2a:	eb ef       	ldi	r30, 0xFB	; 251
     a2c:	f3 e0       	ldi	r31, 0x03	; 3
     a2e:	87 a5       	ldd	r24, Z+47	; 0x2f
     a30:	90 a9       	ldd	r25, Z+48	; 0x30
     a32:	a1 a9       	ldd	r26, Z+49	; 0x31
     a34:	b2 a9       	ldd	r27, Z+50	; 0x32
     a36:	83 8f       	std	Z+27, r24	; 0x1b
     a38:	94 8f       	std	Z+28, r25	; 0x1c
     a3a:	a5 8f       	std	Z+29, r26	; 0x1d
     a3c:	b6 8f       	std	Z+30, r27	; 0x1e
		break;
	}
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <_Z12adc_to_massahhi>:

void adc_to_massa (uint8_t number, uint8_t filtr, int16_t adc){      // функци€ преобразовани€ кода ј÷ѕ в вес
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
	static int32_t adc_unsignet;
	static uint8_t count1,count2,count3,count4;                      // счетчики перемещени€ по фильтру
	static int32_t filtr_adc1[42],filtr_adc2[42],filtr_adc3[42],filtr_adc4[42];    // сами €чейки фильтра
	static int32_t adc_filtr;                                       // дл€ хранени€ суммы фильтра
	
	switch (number) {                                                // сюда передаем номер канала с которым работаем
     a58:	82 30       	cpi	r24, 0x02	; 2
     a5a:	09 f4       	brne	.+2      	; 0xa5e <_Z12adc_to_massahhi+0x16>
     a5c:	8b c0       	rjmp	.+278    	; 0xb74 <_Z12adc_to_massahhi+0x12c>
     a5e:	18 f4       	brcc	.+6      	; 0xa66 <_Z12adc_to_massahhi+0x1e>
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	41 f0       	breq	.+16     	; 0xa74 <_Z12adc_to_massahhi+0x2c>
     a64:	06 c2       	rjmp	.+1036   	; 0xe72 <_Z12adc_to_massahhi+0x42a>
     a66:	83 30       	cpi	r24, 0x03	; 3
     a68:	09 f4       	brne	.+2      	; 0xa6c <_Z12adc_to_massahhi+0x24>
     a6a:	04 c1       	rjmp	.+520    	; 0xc74 <_Z12adc_to_massahhi+0x22c>
     a6c:	84 30       	cpi	r24, 0x04	; 4
     a6e:	09 f4       	brne	.+2      	; 0xa72 <_Z12adc_to_massahhi+0x2a>
     a70:	81 c1       	rjmp	.+770    	; 0xd74 <_Z12adc_to_massahhi+0x32c>
     a72:	ff c1       	rjmp	.+1022   	; 0xe72 <_Z12adc_to_massahhi+0x42a>
		case 1:
		adc = adc - adc_data.zero_adc1;                            // сначала отнимаем код нул€
     a74:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <adc_data+0x28>
     a78:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <adc_data+0x29>
     a7c:	9a 01       	movw	r18, r20
     a7e:	28 1b       	sub	r18, r24
     a80:	39 0b       	sbc	r19, r25
     a82:	c9 01       	movw	r24, r18
		filtr_adc1[count1] = adc;                                  // записываем в €чейку пам€ти
     a84:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <_ZZ12adc_to_massahhiE6count1>
     a88:	e2 2f       	mov	r30, r18
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	eb 5e       	subi	r30, 0xEB	; 235
     a96:	fc 4f       	sbci	r31, 0xFC	; 252
     a98:	09 2e       	mov	r0, r25
     a9a:	00 0c       	add	r0, r0
     a9c:	aa 0b       	sbc	r26, r26
     a9e:	bb 0b       	sbc	r27, r27
     aa0:	80 83       	st	Z, r24
     aa2:	91 83       	std	Z+1, r25	; 0x01
     aa4:	a2 83       	std	Z+2, r26	; 0x02
     aa6:	b3 83       	std	Z+3, r27	; 0x03
		count1 ++;                                                 // увеличиваем значение €чейки в которую пишем
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	82 0f       	add	r24, r18
     aac:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <_ZZ12adc_to_massahhiE6count1>
		if (count1 >= filtr) {count1 = 0;}                         // если она равн€етс€ фильтру начинаем писать в 0 €чейку
     ab0:	86 17       	cp	r24, r22
     ab2:	10 f0       	brcs	.+4      	; 0xab8 <_Z12adc_to_massahhi+0x70>
     ab4:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <_ZZ12adc_to_massahhiE6count1>
		setting.kal_koef4 = setting.kal_koef4_5;
		break;
	}
}

void adc_to_massa (uint8_t number, uint8_t filtr, int16_t adc){      // функци€ преобразовани€ кода ј÷ѕ в вес
     ab8:	80 e0       	ldi	r24, 0x00	; 0
		case 1:
		adc = adc - adc_data.zero_adc1;                            // сначала отнимаем код нул€
		filtr_adc1[count1] = adc;                                  // записываем в €чейку пам€ти
		count1 ++;                                                 // увеличиваем значение €чейки в которую пишем
		if (count1 >= filtr) {count1 = 0;}                         // если она равн€етс€ фильтру начинаем писать в 0 €чейку
		for (uint8_t i = 0; i < filtr; i ++){                      // складываем все €чейки в одно число
     aba:	86 17       	cp	r24, r22
     abc:	10 f5       	brcc	.+68     	; 0xb02 <_Z12adc_to_massahhi+0xba>
			adc_filtr += filtr_adc1[i];
     abe:	e8 2f       	mov	r30, r24
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	eb 5e       	subi	r30, 0xEB	; 235
     acc:	fc 4f       	sbci	r31, 0xFC	; 252
     ace:	00 81       	ld	r16, Z
     ad0:	11 81       	ldd	r17, Z+1	; 0x01
     ad2:	22 81       	ldd	r18, Z+2	; 0x02
     ad4:	33 81       	ldd	r19, Z+3	; 0x03
     ad6:	c0 90 11 03 	lds	r12, 0x0311	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     ada:	d0 90 12 03 	lds	r13, 0x0312	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     ade:	e0 90 13 03 	lds	r14, 0x0313	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     ae2:	f0 90 14 03 	lds	r15, 0x0314	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
     ae6:	0c 0d       	add	r16, r12
     ae8:	1d 1d       	adc	r17, r13
     aea:	2e 1d       	adc	r18, r14
     aec:	3f 1d       	adc	r19, r15
     aee:	00 93 11 03 	sts	0x0311, r16	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     af2:	10 93 12 03 	sts	0x0312, r17	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     af6:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     afa:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
		case 1:
		adc = adc - adc_data.zero_adc1;                            // сначала отнимаем код нул€
		filtr_adc1[count1] = adc;                                  // записываем в €чейку пам€ти
		count1 ++;                                                 // увеличиваем значение €чейки в которую пишем
		if (count1 >= filtr) {count1 = 0;}                         // если она равн€етс€ фильтру начинаем писать в 0 €чейку
		for (uint8_t i = 0; i < filtr; i ++){                      // складываем все €чейки в одно число
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	dc cf       	rjmp	.-72     	; 0xaba <_Z12adc_to_massahhi+0x72>
			adc_filtr += filtr_adc1[i];
		}
		adc_unsignet = adc_filtr / filtr;                         // делим на значение фильтра и записываем результат
     b02:	26 2f       	mov	r18, r22
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     b0e:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     b12:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     b16:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
     b1a:	0e 94 2f 11 	call	0x225e	; 0x225e <__divmodsi4>
		adc_data.adc_kalib1 = adc_unsignet;                        // дл€ калибровки нужны значени€ без коэфициента
     b1e:	ce e2       	ldi	r28, 0x2E	; 46
     b20:	d4 e0       	ldi	r29, 0x04	; 4
     b22:	28 8b       	std	Y+16, r18	; 0x10
     b24:	39 8b       	std	Y+17, r19	; 0x11
     b26:	4a 8b       	std	Y+18, r20	; 0x12
     b28:	5b 8b       	std	Y+19, r21	; 0x13
		adc_data.massa1 = ((adc_unsignet * setting.kal_koef1)+0.5);        // потом умножаем на калибровочный коэф
     b2a:	c0 90 0a 04 	lds	r12, 0x040A	; 0x80040a <setting+0xf>
     b2e:	d0 90 0b 04 	lds	r13, 0x040B	; 0x80040b <setting+0x10>
     b32:	e0 90 0c 04 	lds	r14, 0x040C	; 0x80040c <setting+0x11>
     b36:	f0 90 0d 04 	lds	r15, 0x040D	; 0x80040d <setting+0x12>
     b3a:	ca 01       	movw	r24, r20
     b3c:	b9 01       	movw	r22, r18
     b3e:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
     b42:	a7 01       	movw	r20, r14
     b44:	96 01       	movw	r18, r12
     b46:	0e 94 b2 10 	call	0x2164	; 0x2164 <__mulsf3>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	5f e3       	ldi	r21, 0x3F	; 63
     b52:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__addsf3>
     b56:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixsfsi>
     b5a:	68 83       	st	Y, r22
     b5c:	79 83       	std	Y+1, r23	; 0x01
     b5e:	8a 83       	std	Y+2, r24	; 0x02
     b60:	9b 83       	std	Y+3, r25	; 0x03
		adc_filtr = 0;
     b62:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     b66:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     b6a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     b6e:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
		break;
     b72:	7f c1       	rjmp	.+766    	; 0xe72 <_Z12adc_to_massahhi+0x42a>
		
		case 2:
		adc = adc - adc_data.zero_adc2;
     b74:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <adc_data+0x2a>
     b78:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <adc_data+0x2b>
     b7c:	9a 01       	movw	r18, r20
     b7e:	28 1b       	sub	r18, r24
     b80:	39 0b       	sbc	r19, r25
     b82:	c9 01       	movw	r24, r18
		filtr_adc2[count1] = adc;
     b84:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <_ZZ12adc_to_massahhiE6count1>
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	e7 59       	subi	r30, 0x97	; 151
     b94:	fd 4f       	sbci	r31, 0xFD	; 253
     b96:	09 2e       	mov	r0, r25
     b98:	00 0c       	add	r0, r0
     b9a:	aa 0b       	sbc	r26, r26
     b9c:	bb 0b       	sbc	r27, r27
     b9e:	80 83       	st	Z, r24
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	a2 83       	std	Z+2, r26	; 0x02
     ba4:	b3 83       	std	Z+3, r27	; 0x03
		count2 ++;
     ba6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZZ12adc_to_massahhiE6count2>
     baa:	8f 5f       	subi	r24, 0xFF	; 255
     bac:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <_ZZ12adc_to_massahhiE6count2>
		if (count2 >= filtr) {count2 = 0;}
     bb0:	86 17       	cp	r24, r22
     bb2:	10 f0       	brcs	.+4      	; 0xbb8 <_Z12adc_to_massahhi+0x170>
     bb4:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <_ZZ12adc_to_massahhiE6count2>
		setting.kal_koef4 = setting.kal_koef4_5;
		break;
	}
}

void adc_to_massa (uint8_t number, uint8_t filtr, int16_t adc){      // функци€ преобразовани€ кода ј÷ѕ в вес
     bb8:	80 e0       	ldi	r24, 0x00	; 0
		case 2:
		adc = adc - adc_data.zero_adc2;
		filtr_adc2[count1] = adc;
		count2 ++;
		if (count2 >= filtr) {count2 = 0;}
		for (uint8_t i = 0; i < filtr; i ++){
     bba:	86 17       	cp	r24, r22
     bbc:	10 f5       	brcc	.+68     	; 0xc02 <_Z12adc_to_massahhi+0x1ba>
			adc_filtr += filtr_adc2[i];
     bbe:	e8 2f       	mov	r30, r24
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	ee 0f       	add	r30, r30
     bc8:	ff 1f       	adc	r31, r31
     bca:	e7 59       	subi	r30, 0x97	; 151
     bcc:	fd 4f       	sbci	r31, 0xFD	; 253
     bce:	00 81       	ld	r16, Z
     bd0:	11 81       	ldd	r17, Z+1	; 0x01
     bd2:	22 81       	ldd	r18, Z+2	; 0x02
     bd4:	33 81       	ldd	r19, Z+3	; 0x03
     bd6:	c0 90 11 03 	lds	r12, 0x0311	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     bda:	d0 90 12 03 	lds	r13, 0x0312	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     bde:	e0 90 13 03 	lds	r14, 0x0313	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     be2:	f0 90 14 03 	lds	r15, 0x0314	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
     be6:	0c 0d       	add	r16, r12
     be8:	1d 1d       	adc	r17, r13
     bea:	2e 1d       	adc	r18, r14
     bec:	3f 1d       	adc	r19, r15
     bee:	00 93 11 03 	sts	0x0311, r16	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     bf2:	10 93 12 03 	sts	0x0312, r17	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     bf6:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     bfa:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
		case 2:
		adc = adc - adc_data.zero_adc2;
		filtr_adc2[count1] = adc;
		count2 ++;
		if (count2 >= filtr) {count2 = 0;}
		for (uint8_t i = 0; i < filtr; i ++){
     bfe:	8f 5f       	subi	r24, 0xFF	; 255
     c00:	dc cf       	rjmp	.-72     	; 0xbba <_Z12adc_to_massahhi+0x172>
			adc_filtr += filtr_adc2[i];
		}
		adc_unsignet = adc_filtr / filtr;
     c02:	26 2f       	mov	r18, r22
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     c0e:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     c12:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     c16:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
     c1a:	0e 94 2f 11 	call	0x225e	; 0x225e <__divmodsi4>
		adc_data.adc_kalib2 = adc_unsignet;
     c1e:	ce e2       	ldi	r28, 0x2E	; 46
     c20:	d4 e0       	ldi	r29, 0x04	; 4
     c22:	2c 8b       	std	Y+20, r18	; 0x14
     c24:	3d 8b       	std	Y+21, r19	; 0x15
     c26:	4e 8b       	std	Y+22, r20	; 0x16
     c28:	5f 8b       	std	Y+23, r21	; 0x17
		adc_data.massa2 = ((adc_unsignet * setting.kal_koef2)+0.5);
     c2a:	c0 90 0e 04 	lds	r12, 0x040E	; 0x80040e <setting+0x13>
     c2e:	d0 90 0f 04 	lds	r13, 0x040F	; 0x80040f <setting+0x14>
     c32:	e0 90 10 04 	lds	r14, 0x0410	; 0x800410 <setting+0x15>
     c36:	f0 90 11 04 	lds	r15, 0x0411	; 0x800411 <setting+0x16>
     c3a:	ca 01       	movw	r24, r20
     c3c:	b9 01       	movw	r22, r18
     c3e:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
     c42:	a7 01       	movw	r20, r14
     c44:	96 01       	movw	r18, r12
     c46:	0e 94 b2 10 	call	0x2164	; 0x2164 <__mulsf3>
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	5f e3       	ldi	r21, 0x3F	; 63
     c52:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__addsf3>
     c56:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixsfsi>
     c5a:	6c 83       	std	Y+4, r22	; 0x04
     c5c:	7d 83       	std	Y+5, r23	; 0x05
     c5e:	8e 83       	std	Y+6, r24	; 0x06
     c60:	9f 83       	std	Y+7, r25	; 0x07
		adc_filtr = 0;
     c62:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     c66:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     c6a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     c6e:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
		break;
     c72:	ff c0       	rjmp	.+510    	; 0xe72 <_Z12adc_to_massahhi+0x42a>
		
		case 3:
		adc = adc - adc_data.zero_adc3;
     c74:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <adc_data+0x2c>
     c78:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <adc_data+0x2d>
     c7c:	9a 01       	movw	r18, r20
     c7e:	28 1b       	sub	r18, r24
     c80:	39 0b       	sbc	r19, r25
     c82:	c9 01       	movw	r24, r18
		filtr_adc3[count1] = adc;
     c84:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <_ZZ12adc_to_massahhiE6count1>
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	ee 0f       	add	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	ee 0f       	add	r30, r30
     c90:	ff 1f       	adc	r31, r31
     c92:	e0 54       	subi	r30, 0x40	; 64
     c94:	fe 4f       	sbci	r31, 0xFE	; 254
     c96:	09 2e       	mov	r0, r25
     c98:	00 0c       	add	r0, r0
     c9a:	aa 0b       	sbc	r26, r26
     c9c:	bb 0b       	sbc	r27, r27
     c9e:	80 83       	st	Z, r24
     ca0:	91 83       	std	Z+1, r25	; 0x01
     ca2:	a2 83       	std	Z+2, r26	; 0x02
     ca4:	b3 83       	std	Z+3, r27	; 0x03
		count3 ++;
     ca6:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <_ZZ12adc_to_massahhiE6count3>
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <_ZZ12adc_to_massahhiE6count3>
		if (count3 >= filtr) {count3 = 0;}
     cb0:	86 17       	cp	r24, r22
     cb2:	10 f0       	brcs	.+4      	; 0xcb8 <_Z12adc_to_massahhi+0x270>
     cb4:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <_ZZ12adc_to_massahhiE6count3>
		setting.kal_koef4 = setting.kal_koef4_5;
		break;
	}
}

void adc_to_massa (uint8_t number, uint8_t filtr, int16_t adc){      // функци€ преобразовани€ кода ј÷ѕ в вес
     cb8:	80 e0       	ldi	r24, 0x00	; 0
		case 3:
		adc = adc - adc_data.zero_adc3;
		filtr_adc3[count1] = adc;
		count3 ++;
		if (count3 >= filtr) {count3 = 0;}
		for (uint8_t i = 0; i < filtr; i ++){
     cba:	86 17       	cp	r24, r22
     cbc:	10 f5       	brcc	.+68     	; 0xd02 <_Z12adc_to_massahhi+0x2ba>
			adc_filtr += filtr_adc3[i];
     cbe:	e8 2f       	mov	r30, r24
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	e0 54       	subi	r30, 0x40	; 64
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	00 81       	ld	r16, Z
     cd0:	11 81       	ldd	r17, Z+1	; 0x01
     cd2:	22 81       	ldd	r18, Z+2	; 0x02
     cd4:	33 81       	ldd	r19, Z+3	; 0x03
     cd6:	c0 90 11 03 	lds	r12, 0x0311	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     cda:	d0 90 12 03 	lds	r13, 0x0312	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     cde:	e0 90 13 03 	lds	r14, 0x0313	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     ce2:	f0 90 14 03 	lds	r15, 0x0314	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
     ce6:	0c 0d       	add	r16, r12
     ce8:	1d 1d       	adc	r17, r13
     cea:	2e 1d       	adc	r18, r14
     cec:	3f 1d       	adc	r19, r15
     cee:	00 93 11 03 	sts	0x0311, r16	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     cf2:	10 93 12 03 	sts	0x0312, r17	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     cf6:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     cfa:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
		case 3:
		adc = adc - adc_data.zero_adc3;
		filtr_adc3[count1] = adc;
		count3 ++;
		if (count3 >= filtr) {count3 = 0;}
		for (uint8_t i = 0; i < filtr; i ++){
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	dc cf       	rjmp	.-72     	; 0xcba <_Z12adc_to_massahhi+0x272>
			adc_filtr += filtr_adc3[i];
		}
		adc_unsignet = adc_filtr / filtr;
     d02:	26 2f       	mov	r18, r22
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     d0e:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     d12:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     d16:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
     d1a:	0e 94 2f 11 	call	0x225e	; 0x225e <__divmodsi4>
		adc_data.adc_kalib3 = adc_unsignet;
     d1e:	ce e2       	ldi	r28, 0x2E	; 46
     d20:	d4 e0       	ldi	r29, 0x04	; 4
     d22:	28 8f       	std	Y+24, r18	; 0x18
     d24:	39 8f       	std	Y+25, r19	; 0x19
     d26:	4a 8f       	std	Y+26, r20	; 0x1a
     d28:	5b 8f       	std	Y+27, r21	; 0x1b
		adc_data.massa3 = ((adc_unsignet * setting.kal_koef3)+0.5);
     d2a:	c0 90 12 04 	lds	r12, 0x0412	; 0x800412 <setting+0x17>
     d2e:	d0 90 13 04 	lds	r13, 0x0413	; 0x800413 <setting+0x18>
     d32:	e0 90 14 04 	lds	r14, 0x0414	; 0x800414 <setting+0x19>
     d36:	f0 90 15 04 	lds	r15, 0x0415	; 0x800415 <setting+0x1a>
     d3a:	ca 01       	movw	r24, r20
     d3c:	b9 01       	movw	r22, r18
     d3e:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
     d42:	a7 01       	movw	r20, r14
     d44:	96 01       	movw	r18, r12
     d46:	0e 94 b2 10 	call	0x2164	; 0x2164 <__mulsf3>
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__addsf3>
     d56:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixsfsi>
     d5a:	68 87       	std	Y+8, r22	; 0x08
     d5c:	79 87       	std	Y+9, r23	; 0x09
     d5e:	8a 87       	std	Y+10, r24	; 0x0a
     d60:	9b 87       	std	Y+11, r25	; 0x0b
		adc_filtr = 0;
     d62:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     d66:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     d6a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     d6e:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
		break;
     d72:	7f c0       	rjmp	.+254    	; 0xe72 <_Z12adc_to_massahhi+0x42a>
		
		case 4:
		adc = adc - adc_data.zero_adc4;
     d74:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <adc_data+0x2e>
     d78:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <adc_data+0x2f>
     d7c:	9a 01       	movw	r18, r20
     d7e:	28 1b       	sub	r18, r24
     d80:	39 0b       	sbc	r19, r25
     d82:	c9 01       	movw	r24, r18
		filtr_adc4[count1] = adc;
     d84:	e0 91 bd 03 	lds	r30, 0x03BD	; 0x8003bd <_ZZ12adc_to_massahhiE6count1>
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	e9 5e       	subi	r30, 0xE9	; 233
     d94:	fe 4f       	sbci	r31, 0xFE	; 254
     d96:	09 2e       	mov	r0, r25
     d98:	00 0c       	add	r0, r0
     d9a:	aa 0b       	sbc	r26, r26
     d9c:	bb 0b       	sbc	r27, r27
     d9e:	80 83       	st	Z, r24
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	a2 83       	std	Z+2, r26	; 0x02
     da4:	b3 83       	std	Z+3, r27	; 0x03
		count4 ++;
     da6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZZ12adc_to_massahhiE6count4>
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ZZ12adc_to_massahhiE6count4>
		if (count4 >= filtr) {count4 = 0;}
     db0:	86 17       	cp	r24, r22
     db2:	10 f0       	brcs	.+4      	; 0xdb8 <_Z12adc_to_massahhi+0x370>
     db4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <_ZZ12adc_to_massahhiE6count4>
		setting.kal_koef4 = setting.kal_koef4_5;
		break;
	}
}

void adc_to_massa (uint8_t number, uint8_t filtr, int16_t adc){      // функци€ преобразовани€ кода ј÷ѕ в вес
     db8:	80 e0       	ldi	r24, 0x00	; 0
		case 4:
		adc = adc - adc_data.zero_adc4;
		filtr_adc4[count1] = adc;
		count4 ++;
		if (count4 >= filtr) {count4 = 0;}
		for (uint8_t i = 0; i < filtr; i ++){
     dba:	86 17       	cp	r24, r22
     dbc:	10 f5       	brcc	.+68     	; 0xe02 <_Z12adc_to_massahhi+0x3ba>
			adc_filtr += filtr_adc4[i];
     dbe:	e8 2f       	mov	r30, r24
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	e9 5e       	subi	r30, 0xE9	; 233
     dcc:	fe 4f       	sbci	r31, 0xFE	; 254
     dce:	00 81       	ld	r16, Z
     dd0:	11 81       	ldd	r17, Z+1	; 0x01
     dd2:	22 81       	ldd	r18, Z+2	; 0x02
     dd4:	33 81       	ldd	r19, Z+3	; 0x03
     dd6:	c0 90 11 03 	lds	r12, 0x0311	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     dda:	d0 90 12 03 	lds	r13, 0x0312	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     dde:	e0 90 13 03 	lds	r14, 0x0313	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     de2:	f0 90 14 03 	lds	r15, 0x0314	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
     de6:	0c 0d       	add	r16, r12
     de8:	1d 1d       	adc	r17, r13
     dea:	2e 1d       	adc	r18, r14
     dec:	3f 1d       	adc	r19, r15
     dee:	00 93 11 03 	sts	0x0311, r16	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     df2:	10 93 12 03 	sts	0x0312, r17	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     df6:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     dfa:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
		case 4:
		adc = adc - adc_data.zero_adc4;
		filtr_adc4[count1] = adc;
		count4 ++;
		if (count4 >= filtr) {count4 = 0;}
		for (uint8_t i = 0; i < filtr; i ++){
     dfe:	8f 5f       	subi	r24, 0xFF	; 255
     e00:	dc cf       	rjmp	.-72     	; 0xdba <_Z12adc_to_massahhi+0x372>
			adc_filtr += filtr_adc4[i];
		}
		adc_unsignet = adc_filtr / filtr;
     e02:	26 2f       	mov	r18, r22
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	60 91 11 03 	lds	r22, 0x0311	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     e0e:	70 91 12 03 	lds	r23, 0x0312	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     e12:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     e16:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
     e1a:	0e 94 2f 11 	call	0x225e	; 0x225e <__divmodsi4>
		adc_data.adc_kalib4 = adc_unsignet;
     e1e:	ce e2       	ldi	r28, 0x2E	; 46
     e20:	d4 e0       	ldi	r29, 0x04	; 4
     e22:	2c 8f       	std	Y+28, r18	; 0x1c
     e24:	3d 8f       	std	Y+29, r19	; 0x1d
     e26:	4e 8f       	std	Y+30, r20	; 0x1e
     e28:	5f 8f       	std	Y+31, r21	; 0x1f
		adc_data.massa4 = ((adc_unsignet * setting.kal_koef4)+0.5);
     e2a:	c0 90 16 04 	lds	r12, 0x0416	; 0x800416 <setting+0x1b>
     e2e:	d0 90 17 04 	lds	r13, 0x0417	; 0x800417 <setting+0x1c>
     e32:	e0 90 18 04 	lds	r14, 0x0418	; 0x800418 <setting+0x1d>
     e36:	f0 90 19 04 	lds	r15, 0x0419	; 0x800419 <setting+0x1e>
     e3a:	ca 01       	movw	r24, r20
     e3c:	b9 01       	movw	r22, r18
     e3e:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
     e42:	a7 01       	movw	r20, r14
     e44:	96 01       	movw	r18, r12
     e46:	0e 94 b2 10 	call	0x2164	; 0x2164 <__mulsf3>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	5f e3       	ldi	r21, 0x3F	; 63
     e52:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__addsf3>
     e56:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fixsfsi>
     e5a:	6c 87       	std	Y+12, r22	; 0x0c
     e5c:	7d 87       	std	Y+13, r23	; 0x0d
     e5e:	8e 87       	std	Y+14, r24	; 0x0e
     e60:	9f 87       	std	Y+15, r25	; 0x0f
		adc_filtr = 0;
     e62:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <_ZZ12adc_to_massahhiE9adc_filtr>
     e66:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <_ZZ12adc_to_massahhiE9adc_filtr+0x1>
     e6a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZZ12adc_to_massahhiE9adc_filtr+0x2>
     e6e:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZZ12adc_to_massahhiE9adc_filtr+0x3>
		break;
	}
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	08 95       	ret

00000e84 <_Z7diskretlh>:

int32_t diskret (int32_t data, uint8_t dskrt)        // функци€ дискрета, вз€та с впшки
{
     e84:	4f 92       	push	r4
     e86:	5f 92       	push	r5
     e88:	6f 92       	push	r6
     e8a:	7f 92       	push	r7
     e8c:	8f 92       	push	r8
     e8e:	9f 92       	push	r9
     e90:	af 92       	push	r10
     e92:	bf 92       	push	r11
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	cf 93       	push	r28
     e9e:	c4 2f       	mov	r28, r20
	static uint32_t temp;
	if (dskrt == 1) return (data);
     ea0:	41 30       	cpi	r20, 0x01	; 1
     ea2:	d9 f1       	breq	.+118    	; 0xf1a <_Z7diskretlh+0x96>
	temp = (data / dskrt) * dskrt;
     ea4:	c4 2e       	mov	r12, r20
     ea6:	d1 2c       	mov	r13, r1
     ea8:	e1 2c       	mov	r14, r1
     eaa:	f1 2c       	mov	r15, r1
     eac:	a7 01       	movw	r20, r14
     eae:	96 01       	movw	r18, r12
     eb0:	0e 94 2f 11 	call	0x225e	; 0x225e <__divmodsi4>
     eb4:	29 01       	movw	r4, r18
     eb6:	3a 01       	movw	r6, r20
     eb8:	4b 01       	movw	r8, r22
     eba:	5c 01       	movw	r10, r24
     ebc:	a7 01       	movw	r20, r14
     ebe:	96 01       	movw	r18, r12
     ec0:	c3 01       	movw	r24, r6
     ec2:	b2 01       	movw	r22, r4
     ec4:	0e 94 1f 11 	call	0x223e	; 0x223e <__mulsi3>
     ec8:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <_ZZ7diskretlhE4temp>
     ecc:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <_ZZ7diskretlhE4temp+0x1>
     ed0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_ZZ7diskretlhE4temp+0x2>
     ed4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_ZZ7diskretlhE4temp+0x3>
	if ((data % dskrt) >= dskrt/2) temp += dskrt;
     ed8:	2c 2f       	mov	r18, r28
     eda:	26 95       	lsr	r18
     edc:	c2 2e       	mov	r12, r18
     ede:	d1 2c       	mov	r13, r1
     ee0:	e1 2c       	mov	r14, r1
     ee2:	f1 2c       	mov	r15, r1
     ee4:	8c 14       	cp	r8, r12
     ee6:	9d 04       	cpc	r9, r13
     ee8:	ae 04       	cpc	r10, r14
     eea:	bf 04       	cpc	r11, r15
     eec:	74 f0       	brlt	.+28     	; 0xf0a <_Z7diskretlh+0x86>
     eee:	ab 01       	movw	r20, r22
     ef0:	bc 01       	movw	r22, r24
     ef2:	4c 0f       	add	r20, r28
     ef4:	51 1d       	adc	r21, r1
     ef6:	61 1d       	adc	r22, r1
     ef8:	71 1d       	adc	r23, r1
     efa:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <_ZZ7diskretlhE4temp>
     efe:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <_ZZ7diskretlhE4temp+0x1>
     f02:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <_ZZ7diskretlhE4temp+0x2>
     f06:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <_ZZ7diskretlhE4temp+0x3>
	return (temp);
     f0a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <_ZZ7diskretlhE4temp>
     f0e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <_ZZ7diskretlhE4temp+0x1>
     f12:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_ZZ7diskretlhE4temp+0x2>
     f16:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <_ZZ7diskretlhE4temp+0x3>
}
     f1a:	cf 91       	pop	r28
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	bf 90       	pop	r11
     f26:	af 90       	pop	r10
     f28:	9f 90       	pop	r9
     f2a:	8f 90       	pop	r8
     f2c:	7f 90       	pop	r7
     f2e:	6f 90       	pop	r6
     f30:	5f 90       	pop	r5
     f32:	4f 90       	pop	r4
     f34:	08 95       	ret

00000f36 <_Z15massa_send_uarthl>:

void massa_send_uart (uint8_t number, int32_t massa ){   // передаем в юарт массу как она есть со знаком
     f36:	cf 93       	push	r28
     f38:	c8 2f       	mov	r28, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	ba 01       	movw	r22, r20
	massa = diskret(massa, setting.disreta);            // приводим к нужному дискрету
     f3e:	40 91 fd 03 	lds	r20, 0x03FD	; 0x8003fd <setting+0x2>
     f42:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z7diskretlh>
	send_adc_data [0] = 0x02;                           // и по протоколу отправл€ем
     f46:	ee eb       	ldi	r30, 0xBE	; 190
     f48:	f3 e0       	ldi	r31, 0x03	; 3
     f4a:	22 e0       	ldi	r18, 0x02	; 2
     f4c:	20 83       	st	Z, r18
	send_adc_data [1] = number ;
     f4e:	c1 83       	std	Z+1, r28	; 0x01
	send_adc_data [2] = massa;
     f50:	62 83       	std	Z+2, r22	; 0x02
	send_adc_data [3] = massa >> 8;
     f52:	73 83       	std	Z+3, r23	; 0x03
	send_adc_data [4] = massa >> 16;
     f54:	84 83       	std	Z+4, r24	; 0x04
	send_adc_data [5] = massa >> 24;
     f56:	95 83       	std	Z+5, r25	; 0x05
	//send_adc_data [6] = calcCRC (send_adc_data, 6);  //  6 потому что мы не используем в расчетах 6 байт
	send_adc_data [6] = 0x03;
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	86 83       	std	Z+6, r24	; 0x06
	uart0_send_string (send_adc_data, 7);    // 7 потому что 7 тоже нужно передать
     f5c:	67 e0       	ldi	r22, 0x07	; 7
     f5e:	cf 01       	movw	r24, r30
     f60:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_Z17uart0_send_stringPch>
	for (int i = 0; i < 10; i ++){
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	8a 30       	cpi	r24, 0x0A	; 10
     f6a:	91 05       	cpc	r25, r1
     f6c:	34 f4       	brge	.+12     	; 0xf7a <_Z15massa_send_uarthl+0x44>
		send_adc_data [i] = 0x00;
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 54       	subi	r30, 0x42	; 66
     f72:	fc 4f       	sbci	r31, 0xFC	; 252
     f74:	10 82       	st	Z, r1
	send_adc_data [4] = massa >> 16;
	send_adc_data [5] = massa >> 24;
	//send_adc_data [6] = calcCRC (send_adc_data, 6);  //  6 потому что мы не используем в расчетах 6 байт
	send_adc_data [6] = 0x03;
	uart0_send_string (send_adc_data, 7);    // 7 потому что 7 тоже нужно передать
	for (int i = 0; i < 10; i ++){
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	f7 cf       	rjmp	.-18     	; 0xf68 <_Z15massa_send_uarthl+0x32>
		send_adc_data [i] = 0x00;
	}
}
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <_Z10send_32bithm>:

void send_32bit (uint8_t command, uint32_t data){
	send_adc_data [0] = 0x02;                           // и по протоколу отправл€ем
     f7e:	ee eb       	ldi	r30, 0xBE	; 190
     f80:	f3 e0       	ldi	r31, 0x03	; 3
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	90 83       	st	Z, r25
	send_adc_data [1] = command;
     f86:	81 83       	std	Z+1, r24	; 0x01
	send_adc_data [2] = data;
     f88:	42 83       	std	Z+2, r20	; 0x02
	send_adc_data [3] = data >> 8;
     f8a:	53 83       	std	Z+3, r21	; 0x03
	send_adc_data [4] = data >> 16;
     f8c:	64 83       	std	Z+4, r22	; 0x04
	send_adc_data [5] = data >> 24;
     f8e:	75 83       	std	Z+5, r23	; 0x05
	// send_adc_data [6] = calcCRC (send_adc_data, 6);  //  6 потому что мы не используем в расчетах 6 байт
	send_adc_data [6] = 0x03;
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	86 83       	std	Z+6, r24	; 0x06
	uart0_send_string (send_adc_data, 7);            // 7 потому что 7 тоже нужно передать
     f94:	67 e0       	ldi	r22, 0x07	; 7
     f96:	cf 01       	movw	r24, r30
     f98:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_Z17uart0_send_stringPch>
	for (int i = 0; i < 10; i ++){
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	8a 30       	cpi	r24, 0x0A	; 10
     fa2:	91 05       	cpc	r25, r1
     fa4:	34 f4       	brge	.+12     	; 0xfb2 <_Z10send_32bithm+0x34>
		send_adc_data [i] = 0x00;
     fa6:	fc 01       	movw	r30, r24
     fa8:	e2 54       	subi	r30, 0x42	; 66
     faa:	fc 4f       	sbci	r31, 0xFC	; 252
     fac:	10 82       	st	Z, r1
	send_adc_data [4] = data >> 16;
	send_adc_data [5] = data >> 24;
	// send_adc_data [6] = calcCRC (send_adc_data, 6);  //  6 потому что мы не используем в расчетах 6 байт
	send_adc_data [6] = 0x03;
	uart0_send_string (send_adc_data, 7);            // 7 потому что 7 тоже нужно передать
	for (int i = 0; i < 10; i ++){
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	f7 cf       	rjmp	.-18     	; 0xfa0 <_Z10send_32bithm+0x22>
     fb2:	08 95       	ret

00000fb4 <_Z9send_8bithh>:
		send_adc_data [i] = 0x00;
	}
}

void send_8bit (uint8_t comand, uint8_t data){
	send_adc_data [0] = 0x02;                           // и по протоколу отправл€ем
     fb4:	ee eb       	ldi	r30, 0xBE	; 190
     fb6:	f3 e0       	ldi	r31, 0x03	; 3
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	90 83       	st	Z, r25
	send_adc_data [1] = comand ;
     fbc:	81 83       	std	Z+1, r24	; 0x01
	send_adc_data [2] = data;
     fbe:	62 83       	std	Z+2, r22	; 0x02
	//send_adc_data [3] = calcCRC (send_adc_data, 3);  //  3 потому что мы не используем в расчетах 3 байт
	send_adc_data [3] = 0x03;
     fc0:	83 e0       	ldi	r24, 0x03	; 3
     fc2:	83 83       	std	Z+3, r24	; 0x03
	uart0_send_string (send_adc_data, 4);    // 4 потому что 4 тоже нужно передать
     fc4:	64 e0       	ldi	r22, 0x04	; 4
     fc6:	cf 01       	movw	r24, r30
     fc8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <_Z17uart0_send_stringPch>
	for (int i = 0; i < 10; i ++){
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	8a 30       	cpi	r24, 0x0A	; 10
     fd2:	91 05       	cpc	r25, r1
     fd4:	34 f4       	brge	.+12     	; 0xfe2 <_Z9send_8bithh+0x2e>
		send_adc_data [i] = 0x00;
     fd6:	fc 01       	movw	r30, r24
     fd8:	e2 54       	subi	r30, 0x42	; 66
     fda:	fc 4f       	sbci	r31, 0xFC	; 252
     fdc:	10 82       	st	Z, r1
	send_adc_data [1] = comand ;
	send_adc_data [2] = data;
	//send_adc_data [3] = calcCRC (send_adc_data, 3);  //  3 потому что мы не используем в расчетах 3 байт
	send_adc_data [3] = 0x03;
	uart0_send_string (send_adc_data, 4);    // 4 потому что 4 тоже нужно передать
	for (int i = 0; i < 10; i ++){
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	f7 cf       	rjmp	.-18     	; 0xfd0 <_Z9send_8bithh+0x1c>
     fe2:	08 95       	ret

00000fe4 <_Z16uart_data_comandh>:
			}
		}
	}
}

void uart_data_comand (uint8_t code){          // после парсинга попадаем сюда
     fe4:	8f 92       	push	r8
     fe6:	9f 92       	push	r9
     fe8:	af 92       	push	r10
     fea:	bf 92       	push	r11
     fec:	cf 92       	push	r12
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
	switch(code){                             // в зависимости от кода выполн€ем действи€
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	fc 01       	movw	r30, r24
     ff8:	31 97       	sbiw	r30, 0x01	; 1
     ffa:	e3 33       	cpi	r30, 0x33	; 51
     ffc:	f1 05       	cpc	r31, r1
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <_Z16uart_data_comandh+0x1e>
    1000:	9c c4       	rjmp	.+2360   	; 0x193a <_Z16uart_data_comandh+0x956>
    1002:	ec 5c       	subi	r30, 0xCC	; 204
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__tablejump2__>
		case 0: break;
		case ADC1_OUT:
		massa_send_uart(1,adc_data.massa1);  // отвечаем массой
    100a:	40 91 2e 04 	lds	r20, 0x042E	; 0x80042e <adc_data>
    100e:	50 91 2f 04 	lds	r21, 0x042F	; 0x80042f <adc_data+0x1>
    1012:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <adc_data+0x2>
    1016:	70 91 31 04 	lds	r23, 0x0431	; 0x800431 <adc_data+0x3>
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z15massa_send_uarthl>
		break;
    1020:	8c c4       	rjmp	.+2328   	; 0x193a <_Z16uart_data_comandh+0x956>
		case ADC2_OUT:
		massa_send_uart(2,adc_data.massa2);
    1022:	40 91 32 04 	lds	r20, 0x0432	; 0x800432 <adc_data+0x4>
    1026:	50 91 33 04 	lds	r21, 0x0433	; 0x800433 <adc_data+0x5>
    102a:	60 91 34 04 	lds	r22, 0x0434	; 0x800434 <adc_data+0x6>
    102e:	70 91 35 04 	lds	r23, 0x0435	; 0x800435 <adc_data+0x7>
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z15massa_send_uarthl>
		break;
    1038:	80 c4       	rjmp	.+2304   	; 0x193a <_Z16uart_data_comandh+0x956>
		case ADC3_OUT:
		massa_send_uart(3,adc_data.massa3);
    103a:	40 91 36 04 	lds	r20, 0x0436	; 0x800436 <adc_data+0x8>
    103e:	50 91 37 04 	lds	r21, 0x0437	; 0x800437 <adc_data+0x9>
    1042:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <adc_data+0xa>
    1046:	70 91 39 04 	lds	r23, 0x0439	; 0x800439 <adc_data+0xb>
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z15massa_send_uarthl>
		break;
    1050:	74 c4       	rjmp	.+2280   	; 0x193a <_Z16uart_data_comandh+0x956>
		case ADC4_OUT:
		massa_send_uart(4,adc_data.massa4);
    1052:	40 91 3a 04 	lds	r20, 0x043A	; 0x80043a <adc_data+0xc>
    1056:	50 91 3b 04 	lds	r21, 0x043B	; 0x80043b <adc_data+0xd>
    105a:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <adc_data+0xe>
    105e:	70 91 3d 04 	lds	r23, 0x043D	; 0x80043d <adc_data+0xf>
    1062:	84 e0       	ldi	r24, 0x04	; 4
    1064:	0e 94 9b 07 	call	0xf36	; 0xf36 <_Z15massa_send_uarthl>
		break;
    1068:	68 c4       	rjmp	.+2256   	; 0x193a <_Z16uart_data_comandh+0x956>
		case ZERO_ALL:  // обнул€емс€ без сохранени€ в пам€ть
		break;
		case NEW_K_K1:  // измен€ем коэф дл€ первого ацп
		setting.kal_koef1 = in_float;
    106a:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <in_float>
    106e:	50 91 89 04 	lds	r21, 0x0489	; 0x800489 <in_float+0x1>
    1072:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <in_float+0x2>
    1076:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <in_float+0x3>
    107a:	40 93 0a 04 	sts	0x040A, r20	; 0x80040a <setting+0xf>
    107e:	50 93 0b 04 	sts	0x040B, r21	; 0x80040b <setting+0x10>
    1082:	60 93 0c 04 	sts	0x040C, r22	; 0x80040c <setting+0x11>
    1086:	70 93 0d 04 	sts	0x040D, r23	; 0x80040d <setting+0x12>
		EEPROM_write_float(EE_K_KOEF1,setting.kal_koef1);
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
		break;
    1092:	53 c4       	rjmp	.+2214   	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_K_K2:
		setting.kal_koef2 = in_float;
    1094:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <in_float>
    1098:	50 91 89 04 	lds	r21, 0x0489	; 0x800489 <in_float+0x1>
    109c:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <in_float+0x2>
    10a0:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <in_float+0x3>
    10a4:	40 93 0e 04 	sts	0x040E, r20	; 0x80040e <setting+0x13>
    10a8:	50 93 0f 04 	sts	0x040F, r21	; 0x80040f <setting+0x14>
    10ac:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <setting+0x15>
    10b0:	70 93 11 04 	sts	0x0411, r23	; 0x800411 <setting+0x16>
		EEPROM_write_float(EE_K_KOEF2,setting.kal_koef2);
    10b4:	86 e0       	ldi	r24, 0x06	; 6
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
		break;
    10bc:	3e c4       	rjmp	.+2172   	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_K_K3:
		setting.kal_koef3 = in_float;
    10be:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <in_float>
    10c2:	50 91 89 04 	lds	r21, 0x0489	; 0x800489 <in_float+0x1>
    10c6:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <in_float+0x2>
    10ca:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <in_float+0x3>
    10ce:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <setting+0x17>
    10d2:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <setting+0x18>
    10d6:	60 93 14 04 	sts	0x0414, r22	; 0x800414 <setting+0x19>
    10da:	70 93 15 04 	sts	0x0415, r23	; 0x800415 <setting+0x1a>
		EEPROM_write_float(EE_K_KOEF3,setting.kal_koef3);
    10de:	8a e0       	ldi	r24, 0x0A	; 10
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
		break;
    10e6:	29 c4       	rjmp	.+2130   	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_K_K4: // тут добавл€ем нововведение, теперь записываем тот коЇф, который был выбран
		setting.kal_koef4 = in_float;
    10e8:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <in_float>
    10ec:	50 91 89 04 	lds	r21, 0x0489	; 0x800489 <in_float+0x1>
    10f0:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <in_float+0x2>
    10f4:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <in_float+0x3>
    10f8:	eb ef       	ldi	r30, 0xFB	; 251
    10fa:	f3 e0       	ldi	r31, 0x03	; 3
    10fc:	43 8f       	std	Z+27, r20	; 0x1b
    10fe:	54 8f       	std	Z+28, r21	; 0x1c
    1100:	65 8f       	std	Z+29, r22	; 0x1d
    1102:	76 8f       	std	Z+30, r23	; 0x1e
		switch (setting.number_kk_4) {
    1104:	83 81       	ldd	r24, Z+3	; 0x03
    1106:	94 81       	ldd	r25, Z+4	; 0x04
    1108:	a5 81       	ldd	r26, Z+5	; 0x05
    110a:	b6 81       	ldd	r27, Z+6	; 0x06
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	91 05       	cpc	r25, r1
    1110:	a1 05       	cpc	r26, r1
    1112:	b1 05       	cpc	r27, r1
    1114:	79 f1       	breq	.+94     	; 0x1174 <_Z16uart_data_comandh+0x190>
    1116:	54 f4       	brge	.+20     	; 0x112c <_Z16uart_data_comandh+0x148>
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	91 05       	cpc	r25, r1
    111c:	a1 05       	cpc	r26, r1
    111e:	b1 05       	cpc	r27, r1
    1120:	79 f0       	breq	.+30     	; 0x1140 <_Z16uart_data_comandh+0x15c>
    1122:	02 97       	sbiw	r24, 0x02	; 2
    1124:	a1 05       	cpc	r26, r1
    1126:	b1 05       	cpc	r27, r1
    1128:	c1 f0       	breq	.+48     	; 0x115a <_Z16uart_data_comandh+0x176>
    112a:	07 c4       	rjmp	.+2062   	; 0x193a <_Z16uart_data_comandh+0x956>
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	91 05       	cpc	r25, r1
    1130:	a1 05       	cpc	r26, r1
    1132:	b1 05       	cpc	r27, r1
    1134:	61 f1       	breq	.+88     	; 0x118e <_Z16uart_data_comandh+0x1aa>
    1136:	05 97       	sbiw	r24, 0x05	; 5
    1138:	a1 05       	cpc	r26, r1
    113a:	b1 05       	cpc	r27, r1
    113c:	a9 f1       	breq	.+106    	; 0x11a8 <_Z16uart_data_comandh+0x1c4>
    113e:	fd c3       	rjmp	.+2042   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 1:
			setting.kal_koef4_1 = setting.kal_koef4;
    1140:	40 93 1a 04 	sts	0x041A, r20	; 0x80041a <setting+0x1f>
    1144:	50 93 1b 04 	sts	0x041B, r21	; 0x80041b <setting+0x20>
    1148:	60 93 1c 04 	sts	0x041C, r22	; 0x80041c <setting+0x21>
    114c:	70 93 1d 04 	sts	0x041D, r23	; 0x80041d <setting+0x22>
			EEPROM_write_float(EE_K_KOEF4_1,setting.kal_koef4);
    1150:	81 e2       	ldi	r24, 0x21	; 33
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    1158:	f0 c3       	rjmp	.+2016   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 2:
			setting.kal_koef4_2 = setting.kal_koef4;
    115a:	40 93 1e 04 	sts	0x041E, r20	; 0x80041e <setting+0x23>
    115e:	50 93 1f 04 	sts	0x041F, r21	; 0x80041f <setting+0x24>
    1162:	60 93 20 04 	sts	0x0420, r22	; 0x800420 <setting+0x25>
    1166:	70 93 21 04 	sts	0x0421, r23	; 0x800421 <setting+0x26>
			EEPROM_write_float(EE_K_KOEF4_2,setting.kal_koef4);
    116a:	85 e2       	ldi	r24, 0x25	; 37
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    1172:	e3 c3       	rjmp	.+1990   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 3:
			setting.kal_koef4_3 = setting.kal_koef4;
    1174:	40 93 22 04 	sts	0x0422, r20	; 0x800422 <setting+0x27>
    1178:	50 93 23 04 	sts	0x0423, r21	; 0x800423 <setting+0x28>
    117c:	60 93 24 04 	sts	0x0424, r22	; 0x800424 <setting+0x29>
    1180:	70 93 25 04 	sts	0x0425, r23	; 0x800425 <setting+0x2a>
			EEPROM_write_float(EE_K_KOEF4_3,setting.kal_koef4);
    1184:	89 e2       	ldi	r24, 0x29	; 41
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    118c:	d6 c3       	rjmp	.+1964   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 4:
			setting.kal_koef4_4 = setting.kal_koef4;
    118e:	40 93 26 04 	sts	0x0426, r20	; 0x800426 <setting+0x2b>
    1192:	50 93 27 04 	sts	0x0427, r21	; 0x800427 <setting+0x2c>
    1196:	60 93 28 04 	sts	0x0428, r22	; 0x800428 <setting+0x2d>
    119a:	70 93 29 04 	sts	0x0429, r23	; 0x800429 <setting+0x2e>
			EEPROM_write_float(EE_K_KOEF4_4,setting.kal_koef4);
    119e:	8d e2       	ldi	r24, 0x2D	; 45
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    11a6:	c9 c3       	rjmp	.+1938   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 5:
			setting.kal_koef4_5 = setting.kal_koef4;
    11a8:	40 93 2a 04 	sts	0x042A, r20	; 0x80042a <setting+0x2f>
    11ac:	50 93 2b 04 	sts	0x042B, r21	; 0x80042b <setting+0x30>
    11b0:	60 93 2c 04 	sts	0x042C, r22	; 0x80042c <setting+0x31>
    11b4:	70 93 2d 04 	sts	0x042D, r23	; 0x80042d <setting+0x32>
			EEPROM_write_float(EE_K_KOEF4_5,setting.kal_koef4);
    11b8:	89 e3       	ldi	r24, 0x39	; 57
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    11c0:	bc c3       	rjmp	.+1912   	; 0x193a <_Z16uart_data_comandh+0x956>
		}
		break;
		case NEW_MASSA1: // расчитываем коэф по новой массе
		setting.kal_koef1 = (double) in_data / (double) labs(adc_data.adc_kalib1); // дл€ калибровки нужны значени€ ј÷ѕ без коэфициента adc_data.adc_kalib1
    11c2:	c0 90 3e 04 	lds	r12, 0x043E	; 0x80043e <adc_data+0x10>
    11c6:	d0 90 3f 04 	lds	r13, 0x043F	; 0x80043f <adc_data+0x11>
    11ca:	e0 90 40 04 	lds	r14, 0x0440	; 0x800440 <adc_data+0x12>
    11ce:	f0 90 41 04 	lds	r15, 0x0441	; 0x800441 <adc_data+0x13>
    11d2:	ff 20       	and	r15, r15
    11d4:	44 f4       	brge	.+16     	; 0x11e6 <_Z16uart_data_comandh+0x202>
    11d6:	f0 94       	com	r15
    11d8:	e0 94       	com	r14
    11da:	d0 94       	com	r13
    11dc:	c0 94       	com	r12
    11de:	c1 1c       	adc	r12, r1
    11e0:	d1 1c       	adc	r13, r1
    11e2:	e1 1c       	adc	r14, r1
    11e4:	f1 1c       	adc	r15, r1
    11e6:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <in_data>
    11ea:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <in_data+0x1>
    11ee:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <in_data+0x2>
    11f2:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <in_data+0x3>
    11f6:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    11fa:	4b 01       	movw	r8, r22
    11fc:	5c 01       	movw	r10, r24
    11fe:	c7 01       	movw	r24, r14
    1200:	b6 01       	movw	r22, r12
    1202:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
    1206:	9b 01       	movw	r18, r22
    1208:	ac 01       	movw	r20, r24
    120a:	c5 01       	movw	r24, r10
    120c:	b4 01       	movw	r22, r8
    120e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__divsf3>
    1212:	ab 01       	movw	r20, r22
    1214:	bc 01       	movw	r22, r24
    1216:	40 93 0a 04 	sts	0x040A, r20	; 0x80040a <setting+0xf>
    121a:	50 93 0b 04 	sts	0x040B, r21	; 0x80040b <setting+0x10>
    121e:	60 93 0c 04 	sts	0x040C, r22	; 0x80040c <setting+0x11>
    1222:	70 93 0d 04 	sts	0x040D, r23	; 0x80040d <setting+0x12>
		EEPROM_write_float(EE_K_KOEF1,setting.kal_koef1);
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
		break;
    122e:	85 c3       	rjmp	.+1802   	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_MASSA2:
		setting.kal_koef2 = (double) in_data / (double) labs(adc_data.adc_kalib2);
    1230:	c0 90 42 04 	lds	r12, 0x0442	; 0x800442 <adc_data+0x14>
    1234:	d0 90 43 04 	lds	r13, 0x0443	; 0x800443 <adc_data+0x15>
    1238:	e0 90 44 04 	lds	r14, 0x0444	; 0x800444 <adc_data+0x16>
    123c:	f0 90 45 04 	lds	r15, 0x0445	; 0x800445 <adc_data+0x17>
    1240:	ff 20       	and	r15, r15
    1242:	44 f4       	brge	.+16     	; 0x1254 <_Z16uart_data_comandh+0x270>
    1244:	f0 94       	com	r15
    1246:	e0 94       	com	r14
    1248:	d0 94       	com	r13
    124a:	c0 94       	com	r12
    124c:	c1 1c       	adc	r12, r1
    124e:	d1 1c       	adc	r13, r1
    1250:	e1 1c       	adc	r14, r1
    1252:	f1 1c       	adc	r15, r1
    1254:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <in_data>
    1258:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <in_data+0x1>
    125c:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <in_data+0x2>
    1260:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <in_data+0x3>
    1264:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	c5 01       	movw	r24, r10
    127a:	b4 01       	movw	r22, r8
    127c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__divsf3>
    1280:	ab 01       	movw	r20, r22
    1282:	bc 01       	movw	r22, r24
    1284:	40 93 0e 04 	sts	0x040E, r20	; 0x80040e <setting+0x13>
    1288:	50 93 0f 04 	sts	0x040F, r21	; 0x80040f <setting+0x14>
    128c:	60 93 10 04 	sts	0x0410, r22	; 0x800410 <setting+0x15>
    1290:	70 93 11 04 	sts	0x0411, r23	; 0x800411 <setting+0x16>
		EEPROM_write_float(EE_K_KOEF2,setting.kal_koef2);
    1294:	86 e0       	ldi	r24, 0x06	; 6
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
		break;
    129c:	4e c3       	rjmp	.+1692   	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_MASSA3:
		setting.kal_koef3 = (double) in_data / (double) labs(adc_data.adc_kalib3);
    129e:	c0 90 46 04 	lds	r12, 0x0446	; 0x800446 <adc_data+0x18>
    12a2:	d0 90 47 04 	lds	r13, 0x0447	; 0x800447 <adc_data+0x19>
    12a6:	e0 90 48 04 	lds	r14, 0x0448	; 0x800448 <adc_data+0x1a>
    12aa:	f0 90 49 04 	lds	r15, 0x0449	; 0x800449 <adc_data+0x1b>
    12ae:	ff 20       	and	r15, r15
    12b0:	44 f4       	brge	.+16     	; 0x12c2 <_Z16uart_data_comandh+0x2de>
    12b2:	f0 94       	com	r15
    12b4:	e0 94       	com	r14
    12b6:	d0 94       	com	r13
    12b8:	c0 94       	com	r12
    12ba:	c1 1c       	adc	r12, r1
    12bc:	d1 1c       	adc	r13, r1
    12be:	e1 1c       	adc	r14, r1
    12c0:	f1 1c       	adc	r15, r1
    12c2:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <in_data>
    12c6:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <in_data+0x1>
    12ca:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <in_data+0x2>
    12ce:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <in_data+0x3>
    12d2:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    12d6:	4b 01       	movw	r8, r22
    12d8:	5c 01       	movw	r10, r24
    12da:	c7 01       	movw	r24, r14
    12dc:	b6 01       	movw	r22, r12
    12de:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
    12e2:	9b 01       	movw	r18, r22
    12e4:	ac 01       	movw	r20, r24
    12e6:	c5 01       	movw	r24, r10
    12e8:	b4 01       	movw	r22, r8
    12ea:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__divsf3>
    12ee:	ab 01       	movw	r20, r22
    12f0:	bc 01       	movw	r22, r24
    12f2:	40 93 12 04 	sts	0x0412, r20	; 0x800412 <setting+0x17>
    12f6:	50 93 13 04 	sts	0x0413, r21	; 0x800413 <setting+0x18>
    12fa:	60 93 14 04 	sts	0x0414, r22	; 0x800414 <setting+0x19>
    12fe:	70 93 15 04 	sts	0x0415, r23	; 0x800415 <setting+0x1a>
		EEPROM_write_float(EE_K_KOEF3,setting.kal_koef3);
    1302:	8a e0       	ldi	r24, 0x0A	; 10
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
		break;
    130a:	17 c3       	rjmp	.+1582   	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_MASSA4:
		setting.kal_koef4 = (double) in_data / (double) labs(adc_data.adc_kalib4);
    130c:	c0 90 4a 04 	lds	r12, 0x044A	; 0x80044a <adc_data+0x1c>
    1310:	d0 90 4b 04 	lds	r13, 0x044B	; 0x80044b <adc_data+0x1d>
    1314:	e0 90 4c 04 	lds	r14, 0x044C	; 0x80044c <adc_data+0x1e>
    1318:	f0 90 4d 04 	lds	r15, 0x044D	; 0x80044d <adc_data+0x1f>
    131c:	ff 20       	and	r15, r15
    131e:	44 f4       	brge	.+16     	; 0x1330 <_Z16uart_data_comandh+0x34c>
    1320:	f0 94       	com	r15
    1322:	e0 94       	com	r14
    1324:	d0 94       	com	r13
    1326:	c0 94       	com	r12
    1328:	c1 1c       	adc	r12, r1
    132a:	d1 1c       	adc	r13, r1
    132c:	e1 1c       	adc	r14, r1
    132e:	f1 1c       	adc	r15, r1
    1330:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <in_data>
    1334:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <in_data+0x1>
    1338:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <in_data+0x2>
    133c:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <in_data+0x3>
    1340:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatunsisf>
    1344:	4b 01       	movw	r8, r22
    1346:	5c 01       	movw	r10, r24
    1348:	c7 01       	movw	r24, r14
    134a:	b6 01       	movw	r22, r12
    134c:	0e 94 26 10 	call	0x204c	; 0x204c <__floatsisf>
    1350:	9b 01       	movw	r18, r22
    1352:	ac 01       	movw	r20, r24
    1354:	c5 01       	movw	r24, r10
    1356:	b4 01       	movw	r22, r8
    1358:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__divsf3>
    135c:	ab 01       	movw	r20, r22
    135e:	bc 01       	movw	r22, r24
    1360:	eb ef       	ldi	r30, 0xFB	; 251
    1362:	f3 e0       	ldi	r31, 0x03	; 3
    1364:	43 8f       	std	Z+27, r20	; 0x1b
    1366:	54 8f       	std	Z+28, r21	; 0x1c
    1368:	65 8f       	std	Z+29, r22	; 0x1d
    136a:	76 8f       	std	Z+30, r23	; 0x1e
		switch (setting.number_kk_4) {
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	94 81       	ldd	r25, Z+4	; 0x04
    1370:	a5 81       	ldd	r26, Z+5	; 0x05
    1372:	b6 81       	ldd	r27, Z+6	; 0x06
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	a1 05       	cpc	r26, r1
    137a:	b1 05       	cpc	r27, r1
    137c:	79 f1       	breq	.+94     	; 0x13dc <_Z16uart_data_comandh+0x3f8>
    137e:	54 f4       	brge	.+20     	; 0x1394 <_Z16uart_data_comandh+0x3b0>
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	91 05       	cpc	r25, r1
    1384:	a1 05       	cpc	r26, r1
    1386:	b1 05       	cpc	r27, r1
    1388:	79 f0       	breq	.+30     	; 0x13a8 <_Z16uart_data_comandh+0x3c4>
    138a:	02 97       	sbiw	r24, 0x02	; 2
    138c:	a1 05       	cpc	r26, r1
    138e:	b1 05       	cpc	r27, r1
    1390:	c1 f0       	breq	.+48     	; 0x13c2 <_Z16uart_data_comandh+0x3de>
    1392:	d3 c2       	rjmp	.+1446   	; 0x193a <_Z16uart_data_comandh+0x956>
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	91 05       	cpc	r25, r1
    1398:	a1 05       	cpc	r26, r1
    139a:	b1 05       	cpc	r27, r1
    139c:	61 f1       	breq	.+88     	; 0x13f6 <_Z16uart_data_comandh+0x412>
    139e:	05 97       	sbiw	r24, 0x05	; 5
    13a0:	a1 05       	cpc	r26, r1
    13a2:	b1 05       	cpc	r27, r1
    13a4:	a9 f1       	breq	.+106    	; 0x1410 <_Z16uart_data_comandh+0x42c>
    13a6:	c9 c2       	rjmp	.+1426   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 1:
			setting.kal_koef4_1 = setting.kal_koef4;
    13a8:	40 93 1a 04 	sts	0x041A, r20	; 0x80041a <setting+0x1f>
    13ac:	50 93 1b 04 	sts	0x041B, r21	; 0x80041b <setting+0x20>
    13b0:	60 93 1c 04 	sts	0x041C, r22	; 0x80041c <setting+0x21>
    13b4:	70 93 1d 04 	sts	0x041D, r23	; 0x80041d <setting+0x22>
			EEPROM_write_float(EE_K_KOEF4_1,setting.kal_koef4);
    13b8:	81 e2       	ldi	r24, 0x21	; 33
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    13c0:	bc c2       	rjmp	.+1400   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 2:
			setting.kal_koef4_2 = setting.kal_koef4;
    13c2:	40 93 1e 04 	sts	0x041E, r20	; 0x80041e <setting+0x23>
    13c6:	50 93 1f 04 	sts	0x041F, r21	; 0x80041f <setting+0x24>
    13ca:	60 93 20 04 	sts	0x0420, r22	; 0x800420 <setting+0x25>
    13ce:	70 93 21 04 	sts	0x0421, r23	; 0x800421 <setting+0x26>
			EEPROM_write_float(EE_K_KOEF4_2,setting.kal_koef4);
    13d2:	85 e2       	ldi	r24, 0x25	; 37
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    13da:	af c2       	rjmp	.+1374   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 3:
			setting.kal_koef4_3 = setting.kal_koef4;
    13dc:	40 93 22 04 	sts	0x0422, r20	; 0x800422 <setting+0x27>
    13e0:	50 93 23 04 	sts	0x0423, r21	; 0x800423 <setting+0x28>
    13e4:	60 93 24 04 	sts	0x0424, r22	; 0x800424 <setting+0x29>
    13e8:	70 93 25 04 	sts	0x0425, r23	; 0x800425 <setting+0x2a>
			EEPROM_write_float(EE_K_KOEF4_3,setting.kal_koef4);
    13ec:	89 e2       	ldi	r24, 0x29	; 41
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    13f4:	a2 c2       	rjmp	.+1348   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 4:
			setting.kal_koef4_4 = setting.kal_koef4;
    13f6:	40 93 26 04 	sts	0x0426, r20	; 0x800426 <setting+0x2b>
    13fa:	50 93 27 04 	sts	0x0427, r21	; 0x800427 <setting+0x2c>
    13fe:	60 93 28 04 	sts	0x0428, r22	; 0x800428 <setting+0x2d>
    1402:	70 93 29 04 	sts	0x0429, r23	; 0x800429 <setting+0x2e>
			EEPROM_write_float(EE_K_KOEF4_4,setting.kal_koef4);
    1406:	8d e2       	ldi	r24, 0x2D	; 45
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    140e:	95 c2       	rjmp	.+1322   	; 0x193a <_Z16uart_data_comandh+0x956>
			case 5:
			setting.kal_koef4_5 = setting.kal_koef4;
    1410:	40 93 2a 04 	sts	0x042A, r20	; 0x80042a <setting+0x2f>
    1414:	50 93 2b 04 	sts	0x042B, r21	; 0x80042b <setting+0x30>
    1418:	60 93 2c 04 	sts	0x042C, r22	; 0x80042c <setting+0x31>
    141c:	70 93 2d 04 	sts	0x042D, r23	; 0x80042d <setting+0x32>
			EEPROM_write_float(EE_K_KOEF4_5,setting.kal_koef4);
    1420:	89 e3       	ldi	r24, 0x39	; 57
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 10 02 	call	0x420	; 0x420 <_Z18EEPROM_write_floatjd>
			break;
    1428:	88 c2       	rjmp	.+1296   	; 0x193a <_Z16uart_data_comandh+0x956>
		}
		break;
		case NEW_DISKRT:
		setting.disreta = in_data;
    142a:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <in_data>
    142e:	60 93 fd 03 	sts	0x03FD, r22	; 0x8003fd <setting+0x2>
		EEPROM_write(EE_DISKRET,setting.disreta);
    1432:	80 e2       	ldi	r24, 0x20	; 32
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
		break;
    143a:	7f c2       	rjmp	.+1278   	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_DISKRT:
		send_8bit (SEND_DISKRT, setting.disreta);
    143c:	60 91 fd 03 	lds	r22, 0x03FD	; 0x8003fd <setting+0x2>
    1440:	8f e0       	ldi	r24, 0x0F	; 15
    1442:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z9send_8bithh>
		break;
    1446:	79 c2       	rjmp	.+1266   	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_FILTR:
		setting.filtr = in_data;
    1448:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <in_data>
    144c:	60 93 fc 03 	sts	0x03FC, r22	; 0x8003fc <setting+0x1>
		EEPROM_write(EE_FILTR,setting.filtr);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
		break;
    1458:	70 c2       	rjmp	.+1248   	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_FILTR:
		send_8bit (SEND_FILTR, setting.filtr);
    145a:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <setting+0x1>
    145e:	81 e1       	ldi	r24, 0x11	; 17
    1460:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z9send_8bithh>
		break;
    1464:	6a c2       	rjmp	.+1236   	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_K_K1:
		send_32bit(SEND_K_K1, transmit_double_32(setting.kal_koef1));
    1466:	60 91 0a 04 	lds	r22, 0x040A	; 0x80040a <setting+0xf>
    146a:	70 91 0b 04 	lds	r23, 0x040B	; 0x80040b <setting+0x10>
    146e:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <setting+0x11>
    1472:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <setting+0x12>
    1476:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_Z18transmit_double_32d>
    147a:	ab 01       	movw	r20, r22
    147c:	bc 01       	movw	r22, r24
    147e:	82 e1       	ldi	r24, 0x12	; 18
    1480:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    1484:	5a c2       	rjmp	.+1204   	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_K_K2:
		send_32bit(SEND_K_K2, transmit_double_32(setting.kal_koef2));
    1486:	60 91 0e 04 	lds	r22, 0x040E	; 0x80040e <setting+0x13>
    148a:	70 91 0f 04 	lds	r23, 0x040F	; 0x80040f <setting+0x14>
    148e:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <setting+0x15>
    1492:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <setting+0x16>
    1496:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_Z18transmit_double_32d>
    149a:	ab 01       	movw	r20, r22
    149c:	bc 01       	movw	r22, r24
    149e:	83 e1       	ldi	r24, 0x13	; 19
    14a0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    14a4:	4a c2       	rjmp	.+1172   	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_K_K3:
		send_32bit(SEND_K_K3, transmit_double_32(setting.kal_koef3));
    14a6:	60 91 12 04 	lds	r22, 0x0412	; 0x800412 <setting+0x17>
    14aa:	70 91 13 04 	lds	r23, 0x0413	; 0x800413 <setting+0x18>
    14ae:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <setting+0x19>
    14b2:	90 91 15 04 	lds	r25, 0x0415	; 0x800415 <setting+0x1a>
    14b6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_Z18transmit_double_32d>
    14ba:	ab 01       	movw	r20, r22
    14bc:	bc 01       	movw	r22, r24
    14be:	84 e1       	ldi	r24, 0x14	; 20
    14c0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    14c4:	3a c2       	rjmp	.+1140   	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_K_K4:
		send_32bit(SEND_K_K4, transmit_double_32(setting.kal_koef4));
    14c6:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <setting+0x1b>
    14ca:	70 91 17 04 	lds	r23, 0x0417	; 0x800417 <setting+0x1c>
    14ce:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <setting+0x1d>
    14d2:	90 91 19 04 	lds	r25, 0x0419	; 0x800419 <setting+0x1e>
    14d6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <_Z18transmit_double_32d>
    14da:	ab 01       	movw	r20, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	85 e1       	ldi	r24, 0x15	; 21
    14e0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    14e4:	2a c2       	rjmp	.+1108   	; 0x193a <_Z16uart_data_comandh+0x956>
		case ZERO_1:
		adc_data.zero_adc1 = adc_data.adc1_clear;
    14e6:	ee e2       	ldi	r30, 0x2E	; 46
    14e8:	f4 e0       	ldi	r31, 0x04	; 4
    14ea:	60 a1       	ldd	r22, Z+32	; 0x20
    14ec:	71 a1       	ldd	r23, Z+33	; 0x21
    14ee:	71 a7       	std	Z+41, r23	; 0x29
    14f0:	60 a7       	std	Z+40, r22	; 0x28
		EEPROM_write_16t (EE_ZERO_ADC1,adc_data.zero_adc1);
    14f2:	82 e1       	ldi	r24, 0x12	; 18
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z16EEPROM_write_16tjj>
		break;
    14fa:	1f c2       	rjmp	.+1086   	; 0x193a <_Z16uart_data_comandh+0x956>
		case ZERO_2:
		adc_data.zero_adc2 = adc_data.adc2_clear;
    14fc:	ee e2       	ldi	r30, 0x2E	; 46
    14fe:	f4 e0       	ldi	r31, 0x04	; 4
    1500:	62 a1       	ldd	r22, Z+34	; 0x22
    1502:	73 a1       	ldd	r23, Z+35	; 0x23
    1504:	73 a7       	std	Z+43, r23	; 0x2b
    1506:	62 a7       	std	Z+42, r22	; 0x2a
		EEPROM_write_16t (EE_ZERO_ADC2,adc_data.zero_adc2);
    1508:	84 e1       	ldi	r24, 0x14	; 20
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z16EEPROM_write_16tjj>
		break;
    1510:	14 c2       	rjmp	.+1064   	; 0x193a <_Z16uart_data_comandh+0x956>
		case ZERO_3:
		adc_data.zero_adc3 = adc_data.adc3_clear;
    1512:	ee e2       	ldi	r30, 0x2E	; 46
    1514:	f4 e0       	ldi	r31, 0x04	; 4
    1516:	64 a1       	ldd	r22, Z+36	; 0x24
    1518:	75 a1       	ldd	r23, Z+37	; 0x25
    151a:	75 a7       	std	Z+45, r23	; 0x2d
    151c:	64 a7       	std	Z+44, r22	; 0x2c
		EEPROM_write_16t (EE_ZERO_ADC3,adc_data.zero_adc3);
    151e:	86 e1       	ldi	r24, 0x16	; 22
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z16EEPROM_write_16tjj>
		break;
    1526:	09 c2       	rjmp	.+1042   	; 0x193a <_Z16uart_data_comandh+0x956>
		case ZERO_4:
		adc_data.zero_adc4 = adc_data.adc4_clear;
    1528:	ee e2       	ldi	r30, 0x2E	; 46
    152a:	f4 e0       	ldi	r31, 0x04	; 4
    152c:	66 a1       	ldd	r22, Z+38	; 0x26
    152e:	77 a1       	ldd	r23, Z+39	; 0x27
    1530:	77 a7       	std	Z+47, r23	; 0x2f
    1532:	66 a7       	std	Z+46, r22	; 0x2e
		EEPROM_write_16t (EE_ZERO_ADC4,adc_data.zero_adc4);
    1534:	88 e1       	ldi	r24, 0x18	; 24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z16EEPROM_write_16tjj>
		break;
    153c:	fe c1       	rjmp	.+1020   	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_TARA:
		send_32bit(SEND_TARA, setting.tara);
    153e:	40 91 02 04 	lds	r20, 0x0402	; 0x800402 <setting+0x7>
    1542:	50 91 03 04 	lds	r21, 0x0403	; 0x800403 <setting+0x8>
    1546:	60 91 04 04 	lds	r22, 0x0404	; 0x800404 <setting+0x9>
    154a:	70 91 05 04 	lds	r23, 0x0405	; 0x800405 <setting+0xa>
    154e:	8a e1       	ldi	r24, 0x1A	; 26
    1550:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    1554:	f2 c1       	rjmp	.+996    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_TARA:
		setting.tara = in_data;
    1556:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    155a:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    155e:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    1562:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    1566:	40 93 02 04 	sts	0x0402, r20	; 0x800402 <setting+0x7>
    156a:	50 93 03 04 	sts	0x0403, r21	; 0x800403 <setting+0x8>
    156e:	60 93 04 04 	sts	0x0404, r22	; 0x800404 <setting+0x9>
    1572:	70 93 05 04 	sts	0x0405, r23	; 0x800405 <setting+0xa>
		EEPROM_write_32t(EE_TARA, setting.tara);
    1576:	81 e3       	ldi	r24, 0x31	; 49
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    157e:	dd c1       	rjmp	.+954    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_NUMBER_KK:
		setting.number_kk_4 = in_data;
    1580:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <in_data>
    1584:	70 91 8d 04 	lds	r23, 0x048D	; 0x80048d <in_data+0x1>
    1588:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <in_data+0x2>
    158c:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <in_data+0x3>
    1590:	60 93 fe 03 	sts	0x03FE, r22	; 0x8003fe <setting+0x3>
    1594:	70 93 ff 03 	sts	0x03FF, r23	; 0x8003ff <setting+0x4>
    1598:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <setting+0x5>
    159c:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <setting+0x6>
		switch (setting.number_kk_4){
    15a0:	63 30       	cpi	r22, 0x03	; 3
    15a2:	71 05       	cpc	r23, r1
    15a4:	81 05       	cpc	r24, r1
    15a6:	91 05       	cpc	r25, r1
    15a8:	69 f1       	breq	.+90     	; 0x1604 <_Z16uart_data_comandh+0x620>
    15aa:	5c f4       	brge	.+22     	; 0x15c2 <_Z16uart_data_comandh+0x5de>
    15ac:	61 30       	cpi	r22, 0x01	; 1
    15ae:	71 05       	cpc	r23, r1
    15b0:	81 05       	cpc	r24, r1
    15b2:	91 05       	cpc	r25, r1
    15b4:	89 f0       	breq	.+34     	; 0x15d8 <_Z16uart_data_comandh+0x5f4>
    15b6:	62 30       	cpi	r22, 0x02	; 2
    15b8:	71 05       	cpc	r23, r1
    15ba:	81 05       	cpc	r24, r1
    15bc:	91 05       	cpc	r25, r1
    15be:	b9 f0       	breq	.+46     	; 0x15ee <_Z16uart_data_comandh+0x60a>
    15c0:	41 c0       	rjmp	.+130    	; 0x1644 <_Z16uart_data_comandh+0x660>
    15c2:	64 30       	cpi	r22, 0x04	; 4
    15c4:	71 05       	cpc	r23, r1
    15c6:	81 05       	cpc	r24, r1
    15c8:	91 05       	cpc	r25, r1
    15ca:	39 f1       	breq	.+78     	; 0x161a <_Z16uart_data_comandh+0x636>
    15cc:	65 30       	cpi	r22, 0x05	; 5
    15ce:	71 05       	cpc	r23, r1
    15d0:	81 05       	cpc	r24, r1
    15d2:	91 05       	cpc	r25, r1
    15d4:	69 f1       	breq	.+90     	; 0x1630 <_Z16uart_data_comandh+0x64c>
    15d6:	36 c0       	rjmp	.+108    	; 0x1644 <_Z16uart_data_comandh+0x660>
			case 1:
			setting.kal_koef4 =  setting.kal_koef4_1;
    15d8:	eb ef       	ldi	r30, 0xFB	; 251
    15da:	f3 e0       	ldi	r31, 0x03	; 3
    15dc:	c7 8c       	ldd	r12, Z+31	; 0x1f
    15de:	d0 a0       	ldd	r13, Z+32	; 0x20
    15e0:	e1 a0       	ldd	r14, Z+33	; 0x21
    15e2:	f2 a0       	ldd	r15, Z+34	; 0x22
    15e4:	c3 8e       	std	Z+27, r12	; 0x1b
    15e6:	d4 8e       	std	Z+28, r13	; 0x1c
    15e8:	e5 8e       	std	Z+29, r14	; 0x1d
    15ea:	f6 8e       	std	Z+30, r15	; 0x1e
			break;
    15ec:	2b c0       	rjmp	.+86     	; 0x1644 <_Z16uart_data_comandh+0x660>
			case 2:
			setting.kal_koef4 =  setting.kal_koef4_2;
    15ee:	eb ef       	ldi	r30, 0xFB	; 251
    15f0:	f3 e0       	ldi	r31, 0x03	; 3
    15f2:	c3 a0       	ldd	r12, Z+35	; 0x23
    15f4:	d4 a0       	ldd	r13, Z+36	; 0x24
    15f6:	e5 a0       	ldd	r14, Z+37	; 0x25
    15f8:	f6 a0       	ldd	r15, Z+38	; 0x26
    15fa:	c3 8e       	std	Z+27, r12	; 0x1b
    15fc:	d4 8e       	std	Z+28, r13	; 0x1c
    15fe:	e5 8e       	std	Z+29, r14	; 0x1d
    1600:	f6 8e       	std	Z+30, r15	; 0x1e
			break;
    1602:	20 c0       	rjmp	.+64     	; 0x1644 <_Z16uart_data_comandh+0x660>
			case 3:
			setting.kal_koef4 =  setting.kal_koef4_3;
    1604:	eb ef       	ldi	r30, 0xFB	; 251
    1606:	f3 e0       	ldi	r31, 0x03	; 3
    1608:	c7 a0       	ldd	r12, Z+39	; 0x27
    160a:	d0 a4       	ldd	r13, Z+40	; 0x28
    160c:	e1 a4       	ldd	r14, Z+41	; 0x29
    160e:	f2 a4       	ldd	r15, Z+42	; 0x2a
    1610:	c3 8e       	std	Z+27, r12	; 0x1b
    1612:	d4 8e       	std	Z+28, r13	; 0x1c
    1614:	e5 8e       	std	Z+29, r14	; 0x1d
    1616:	f6 8e       	std	Z+30, r15	; 0x1e
			break;
    1618:	15 c0       	rjmp	.+42     	; 0x1644 <_Z16uart_data_comandh+0x660>
			case 4:
			setting.kal_koef4 =  setting.kal_koef4_4;
    161a:	eb ef       	ldi	r30, 0xFB	; 251
    161c:	f3 e0       	ldi	r31, 0x03	; 3
    161e:	c3 a4       	ldd	r12, Z+43	; 0x2b
    1620:	d4 a4       	ldd	r13, Z+44	; 0x2c
    1622:	e5 a4       	ldd	r14, Z+45	; 0x2d
    1624:	f6 a4       	ldd	r15, Z+46	; 0x2e
    1626:	c3 8e       	std	Z+27, r12	; 0x1b
    1628:	d4 8e       	std	Z+28, r13	; 0x1c
    162a:	e5 8e       	std	Z+29, r14	; 0x1d
    162c:	f6 8e       	std	Z+30, r15	; 0x1e
			break;
    162e:	0a c0       	rjmp	.+20     	; 0x1644 <_Z16uart_data_comandh+0x660>
			case 5:
			setting.kal_koef4 =  setting.kal_koef4_5;
    1630:	eb ef       	ldi	r30, 0xFB	; 251
    1632:	f3 e0       	ldi	r31, 0x03	; 3
    1634:	c7 a4       	ldd	r12, Z+47	; 0x2f
    1636:	d0 a8       	ldd	r13, Z+48	; 0x30
    1638:	e1 a8       	ldd	r14, Z+49	; 0x31
    163a:	f2 a8       	ldd	r15, Z+50	; 0x32
    163c:	c3 8e       	std	Z+27, r12	; 0x1b
    163e:	d4 8e       	std	Z+28, r13	; 0x1c
    1640:	e5 8e       	std	Z+29, r14	; 0x1d
    1642:	f6 8e       	std	Z+30, r15	; 0x1e
			break;
		}
		EEPROM_write(EE_NUMBER_KK4,setting.number_kk_4);
    1644:	85 e3       	ldi	r24, 0x35	; 53
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 67 01 	call	0x2ce	; 0x2ce <_Z12EEPROM_writejh>
		break;
    164c:	76 c1       	rjmp	.+748    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_NUMBER_KK:
		send_32bit (SEND_NUMBER_KK,setting.number_kk_4);
    164e:	40 91 fe 03 	lds	r20, 0x03FE	; 0x8003fe <setting+0x3>
    1652:	50 91 ff 03 	lds	r21, 0x03FF	; 0x8003ff <setting+0x4>
    1656:	60 91 00 04 	lds	r22, 0x0400	; 0x800400 <setting+0x5>
    165a:	70 91 01 04 	lds	r23, 0x0401	; 0x800401 <setting+0x6>
    165e:	8d e1       	ldi	r24, 0x1D	; 29
    1660:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    1664:	6a c1       	rjmp	.+724    	; 0x193a <_Z16uart_data_comandh+0x956>
		//------------обновление Nextion--------//
		case NEW_ZERO_AX:
		setting.zero_ax = in_data;
    1666:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    166a:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    166e:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    1672:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    1676:	40 93 06 04 	sts	0x0406, r20	; 0x800406 <setting+0xb>
    167a:	50 93 07 04 	sts	0x0407, r21	; 0x800407 <setting+0xc>
    167e:	60 93 08 04 	sts	0x0408, r22	; 0x800408 <setting+0xd>
    1682:	70 93 09 04 	sts	0x0409, r23	; 0x800409 <setting+0xe>
		EEPROM_write_32t(EE_ZERO_AX, setting.zero_ax);
    1686:	8d e3       	ldi	r24, 0x3D	; 61
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    168e:	55 c1       	rjmp	.+682    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_ZERO_AX:
		send_32bit (SEND_ZERO_AX,setting.zero_ax);
    1690:	40 91 06 04 	lds	r20, 0x0406	; 0x800406 <setting+0xb>
    1694:	50 91 07 04 	lds	r21, 0x0407	; 0x800407 <setting+0xc>
    1698:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <setting+0xd>
    169c:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <setting+0xe>
    16a0:	8f e1       	ldi	r24, 0x1F	; 31
    16a2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    16a6:	49 c1       	rjmp	.+658    	; 0x193a <_Z16uart_data_comandh+0x956>
		
		case NEW_CELL0:
		cell_struct.cell0 = in_data;
    16a8:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    16ac:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    16b0:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    16b4:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    16b8:	40 93 d3 03 	sts	0x03D3, r20	; 0x8003d3 <cell_struct>
    16bc:	50 93 d4 03 	sts	0x03D4, r21	; 0x8003d4 <cell_struct+0x1>
    16c0:	60 93 d5 03 	sts	0x03D5, r22	; 0x8003d5 <cell_struct+0x2>
    16c4:	70 93 d6 03 	sts	0x03D6, r23	; 0x8003d6 <cell_struct+0x3>
		EEPROM_write_32t(EE_CELL0, cell_struct.cell0);
    16c8:	81 e4       	ldi	r24, 0x41	; 65
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    16d0:	34 c1       	rjmp	.+616    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL0:
		send_32bit (SEND_CELL0, cell_struct.cell0);
    16d2:	40 91 d3 03 	lds	r20, 0x03D3	; 0x8003d3 <cell_struct>
    16d6:	50 91 d4 03 	lds	r21, 0x03D4	; 0x8003d4 <cell_struct+0x1>
    16da:	60 91 d5 03 	lds	r22, 0x03D5	; 0x8003d5 <cell_struct+0x2>
    16de:	70 91 d6 03 	lds	r23, 0x03D6	; 0x8003d6 <cell_struct+0x3>
    16e2:	81 e2       	ldi	r24, 0x21	; 33
    16e4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    16e8:	28 c1       	rjmp	.+592    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL1:
		cell_struct.cell1 = in_data;
    16ea:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    16ee:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    16f2:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    16f6:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    16fa:	40 93 d7 03 	sts	0x03D7, r20	; 0x8003d7 <cell_struct+0x4>
    16fe:	50 93 d8 03 	sts	0x03D8, r21	; 0x8003d8 <cell_struct+0x5>
    1702:	60 93 d9 03 	sts	0x03D9, r22	; 0x8003d9 <cell_struct+0x6>
    1706:	70 93 da 03 	sts	0x03DA, r23	; 0x8003da <cell_struct+0x7>
		EEPROM_write_32t(EE_CELL1, cell_struct.cell1);
    170a:	85 e4       	ldi	r24, 0x45	; 69
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    1712:	13 c1       	rjmp	.+550    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL1:
		send_32bit (SEND_CELL1, cell_struct.cell1);
    1714:	40 91 d7 03 	lds	r20, 0x03D7	; 0x8003d7 <cell_struct+0x4>
    1718:	50 91 d8 03 	lds	r21, 0x03D8	; 0x8003d8 <cell_struct+0x5>
    171c:	60 91 d9 03 	lds	r22, 0x03D9	; 0x8003d9 <cell_struct+0x6>
    1720:	70 91 da 03 	lds	r23, 0x03DA	; 0x8003da <cell_struct+0x7>
    1724:	83 e2       	ldi	r24, 0x23	; 35
    1726:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    172a:	07 c1       	rjmp	.+526    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL2:
		cell_struct.cell2 = in_data;
    172c:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    1730:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    1734:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    1738:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    173c:	40 93 db 03 	sts	0x03DB, r20	; 0x8003db <cell_struct+0x8>
    1740:	50 93 dc 03 	sts	0x03DC, r21	; 0x8003dc <cell_struct+0x9>
    1744:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <cell_struct+0xa>
    1748:	70 93 de 03 	sts	0x03DE, r23	; 0x8003de <cell_struct+0xb>
		EEPROM_write_32t(EE_CELL2, cell_struct.cell2);
    174c:	89 e4       	ldi	r24, 0x49	; 73
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    1754:	f2 c0       	rjmp	.+484    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL2:
		send_32bit (SEND_CELL2, cell_struct.cell2);
    1756:	40 91 db 03 	lds	r20, 0x03DB	; 0x8003db <cell_struct+0x8>
    175a:	50 91 dc 03 	lds	r21, 0x03DC	; 0x8003dc <cell_struct+0x9>
    175e:	60 91 dd 03 	lds	r22, 0x03DD	; 0x8003dd <cell_struct+0xa>
    1762:	70 91 de 03 	lds	r23, 0x03DE	; 0x8003de <cell_struct+0xb>
    1766:	85 e2       	ldi	r24, 0x25	; 37
    1768:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    176c:	e6 c0       	rjmp	.+460    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL3:
		cell_struct.cell3 = in_data;
    176e:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    1772:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    1776:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    177a:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    177e:	40 93 df 03 	sts	0x03DF, r20	; 0x8003df <cell_struct+0xc>
    1782:	50 93 e0 03 	sts	0x03E0, r21	; 0x8003e0 <cell_struct+0xd>
    1786:	60 93 e1 03 	sts	0x03E1, r22	; 0x8003e1 <cell_struct+0xe>
    178a:	70 93 e2 03 	sts	0x03E2, r23	; 0x8003e2 <cell_struct+0xf>
		EEPROM_write_32t(EE_CELL3, cell_struct.cell3);
    178e:	8d e4       	ldi	r24, 0x4D	; 77
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    1796:	d1 c0       	rjmp	.+418    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL3:
		send_32bit (SEND_CELL3, cell_struct.cell3);
    1798:	40 91 df 03 	lds	r20, 0x03DF	; 0x8003df <cell_struct+0xc>
    179c:	50 91 e0 03 	lds	r21, 0x03E0	; 0x8003e0 <cell_struct+0xd>
    17a0:	60 91 e1 03 	lds	r22, 0x03E1	; 0x8003e1 <cell_struct+0xe>
    17a4:	70 91 e2 03 	lds	r23, 0x03E2	; 0x8003e2 <cell_struct+0xf>
    17a8:	87 e2       	ldi	r24, 0x27	; 39
    17aa:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    17ae:	c5 c0       	rjmp	.+394    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL4:
		cell_struct.cell4 = in_data;
    17b0:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    17b4:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    17b8:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    17bc:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    17c0:	40 93 e3 03 	sts	0x03E3, r20	; 0x8003e3 <cell_struct+0x10>
    17c4:	50 93 e4 03 	sts	0x03E4, r21	; 0x8003e4 <cell_struct+0x11>
    17c8:	60 93 e5 03 	sts	0x03E5, r22	; 0x8003e5 <cell_struct+0x12>
    17cc:	70 93 e6 03 	sts	0x03E6, r23	; 0x8003e6 <cell_struct+0x13>
		EEPROM_write_32t(EE_CELL4, cell_struct.cell4);
    17d0:	81 e5       	ldi	r24, 0x51	; 81
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    17d8:	b0 c0       	rjmp	.+352    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL4:
		send_32bit (SEND_CELL4, cell_struct.cell4);
    17da:	40 91 e3 03 	lds	r20, 0x03E3	; 0x8003e3 <cell_struct+0x10>
    17de:	50 91 e4 03 	lds	r21, 0x03E4	; 0x8003e4 <cell_struct+0x11>
    17e2:	60 91 e5 03 	lds	r22, 0x03E5	; 0x8003e5 <cell_struct+0x12>
    17e6:	70 91 e6 03 	lds	r23, 0x03E6	; 0x8003e6 <cell_struct+0x13>
    17ea:	89 e2       	ldi	r24, 0x29	; 41
    17ec:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    17f0:	a4 c0       	rjmp	.+328    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL5:
		cell_struct.cell5 = in_data;
    17f2:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    17f6:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    17fa:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    17fe:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    1802:	40 93 e7 03 	sts	0x03E7, r20	; 0x8003e7 <cell_struct+0x14>
    1806:	50 93 e8 03 	sts	0x03E8, r21	; 0x8003e8 <cell_struct+0x15>
    180a:	60 93 e9 03 	sts	0x03E9, r22	; 0x8003e9 <cell_struct+0x16>
    180e:	70 93 ea 03 	sts	0x03EA, r23	; 0x8003ea <cell_struct+0x17>
		EEPROM_write_32t(EE_CELL5, cell_struct.cell5);
    1812:	85 e5       	ldi	r24, 0x55	; 85
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    181a:	8f c0       	rjmp	.+286    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL5:
		send_32bit (SEND_CELL5, cell_struct.cell5);
    181c:	40 91 e7 03 	lds	r20, 0x03E7	; 0x8003e7 <cell_struct+0x14>
    1820:	50 91 e8 03 	lds	r21, 0x03E8	; 0x8003e8 <cell_struct+0x15>
    1824:	60 91 e9 03 	lds	r22, 0x03E9	; 0x8003e9 <cell_struct+0x16>
    1828:	70 91 ea 03 	lds	r23, 0x03EA	; 0x8003ea <cell_struct+0x17>
    182c:	8b e2       	ldi	r24, 0x2B	; 43
    182e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    1832:	83 c0       	rjmp	.+262    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL6:
		cell_struct.cell6 = in_data;
    1834:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    1838:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    183c:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    1840:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    1844:	40 93 eb 03 	sts	0x03EB, r20	; 0x8003eb <cell_struct+0x18>
    1848:	50 93 ec 03 	sts	0x03EC, r21	; 0x8003ec <cell_struct+0x19>
    184c:	60 93 ed 03 	sts	0x03ED, r22	; 0x8003ed <cell_struct+0x1a>
    1850:	70 93 ee 03 	sts	0x03EE, r23	; 0x8003ee <cell_struct+0x1b>
		EEPROM_write_32t(EE_CELL6, cell_struct.cell6);
    1854:	89 e5       	ldi	r24, 0x59	; 89
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    185c:	6e c0       	rjmp	.+220    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL6:
		send_32bit (SEND_CELL6, cell_struct.cell6);
    185e:	40 91 eb 03 	lds	r20, 0x03EB	; 0x8003eb <cell_struct+0x18>
    1862:	50 91 ec 03 	lds	r21, 0x03EC	; 0x8003ec <cell_struct+0x19>
    1866:	60 91 ed 03 	lds	r22, 0x03ED	; 0x8003ed <cell_struct+0x1a>
    186a:	70 91 ee 03 	lds	r23, 0x03EE	; 0x8003ee <cell_struct+0x1b>
    186e:	8d e2       	ldi	r24, 0x2D	; 45
    1870:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    1874:	62 c0       	rjmp	.+196    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL7:
		cell_struct.cell7 = in_data;
    1876:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    187a:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    187e:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    1882:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    1886:	40 93 ef 03 	sts	0x03EF, r20	; 0x8003ef <cell_struct+0x1c>
    188a:	50 93 f0 03 	sts	0x03F0, r21	; 0x8003f0 <cell_struct+0x1d>
    188e:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <cell_struct+0x1e>
    1892:	70 93 f2 03 	sts	0x03F2, r23	; 0x8003f2 <cell_struct+0x1f>
		EEPROM_write_32t(EE_CELL7, cell_struct.cell7);
    1896:	8d e5       	ldi	r24, 0x5D	; 93
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    189e:	4d c0       	rjmp	.+154    	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL7:
		send_32bit (SEND_CELL7, cell_struct.cell7);
    18a0:	40 91 ef 03 	lds	r20, 0x03EF	; 0x8003ef <cell_struct+0x1c>
    18a4:	50 91 f0 03 	lds	r21, 0x03F0	; 0x8003f0 <cell_struct+0x1d>
    18a8:	60 91 f1 03 	lds	r22, 0x03F1	; 0x8003f1 <cell_struct+0x1e>
    18ac:	70 91 f2 03 	lds	r23, 0x03F2	; 0x8003f2 <cell_struct+0x1f>
    18b0:	8f e2       	ldi	r24, 0x2F	; 47
    18b2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    18b6:	41 c0       	rjmp	.+130    	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL8:
		cell_struct.cell8 = in_data;
    18b8:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    18bc:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    18c0:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    18c4:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    18c8:	40 93 f3 03 	sts	0x03F3, r20	; 0x8003f3 <cell_struct+0x20>
    18cc:	50 93 f4 03 	sts	0x03F4, r21	; 0x8003f4 <cell_struct+0x21>
    18d0:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <cell_struct+0x22>
    18d4:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <cell_struct+0x23>
		EEPROM_write_32t(EE_CELL8, cell_struct.cell8);
    18d8:	81 e6       	ldi	r24, 0x61	; 97
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    18e0:	2c c0       	rjmp	.+88     	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL8:
		send_32bit (SEND_CELL8, cell_struct.cell8);
    18e2:	40 91 f3 03 	lds	r20, 0x03F3	; 0x8003f3 <cell_struct+0x20>
    18e6:	50 91 f4 03 	lds	r21, 0x03F4	; 0x8003f4 <cell_struct+0x21>
    18ea:	60 91 f5 03 	lds	r22, 0x03F5	; 0x8003f5 <cell_struct+0x22>
    18ee:	70 91 f6 03 	lds	r23, 0x03F6	; 0x8003f6 <cell_struct+0x23>
    18f2:	81 e3       	ldi	r24, 0x31	; 49
    18f4:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
    18f8:	20 c0       	rjmp	.+64     	; 0x193a <_Z16uart_data_comandh+0x956>
		case NEW_CELL9:
		cell_struct.cell9 = in_data;
    18fa:	40 91 8c 04 	lds	r20, 0x048C	; 0x80048c <in_data>
    18fe:	50 91 8d 04 	lds	r21, 0x048D	; 0x80048d <in_data+0x1>
    1902:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <in_data+0x2>
    1906:	70 91 8f 04 	lds	r23, 0x048F	; 0x80048f <in_data+0x3>
    190a:	40 93 f7 03 	sts	0x03F7, r20	; 0x8003f7 <cell_struct+0x24>
    190e:	50 93 f8 03 	sts	0x03F8, r21	; 0x8003f8 <cell_struct+0x25>
    1912:	60 93 f9 03 	sts	0x03F9, r22	; 0x8003f9 <cell_struct+0x26>
    1916:	70 93 fa 03 	sts	0x03FA, r23	; 0x8003fa <cell_struct+0x27>
		EEPROM_write_32t(EE_CELL9, cell_struct.cell9);
    191a:	85 e6       	ldi	r24, 0x65	; 101
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z16EEPROM_write_32tjm>
		break;
    1922:	0b c0       	rjmp	.+22     	; 0x193a <_Z16uart_data_comandh+0x956>
		case SEND_CELL9:
		send_32bit (SEND_CELL9, cell_struct.cell9);
    1924:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <cell_struct+0x24>
    1928:	50 91 f8 03 	lds	r21, 0x03F8	; 0x8003f8 <cell_struct+0x25>
    192c:	60 91 f9 03 	lds	r22, 0x03F9	; 0x8003f9 <cell_struct+0x26>
    1930:	70 91 fa 03 	lds	r23, 0x03FA	; 0x8003fa <cell_struct+0x27>
    1934:	83 e3       	ldi	r24, 0x33	; 51
    1936:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_Z10send_32bithm>
		break;
		
	}
	cod_command = 0;         // сбрасываем в ноль
    193a:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <cod_command>
	in_data = 0;
    193e:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <in_data>
    1942:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <in_data+0x1>
    1946:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <in_data+0x2>
    194a:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <in_data+0x3>
	in_float = 0;
    194e:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <in_float>
    1952:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <in_float+0x1>
    1956:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <in_float+0x2>
    195a:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <in_float+0x3>
}
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	bf 90       	pop	r11
    1968:	af 90       	pop	r10
    196a:	9f 90       	pop	r9
    196c:	8f 90       	pop	r8
    196e:	08 95       	ret

00001970 <main>:


int main(void)
{
	
	init_atmega();
    1970:	0e 94 c4 03 	call	0x788	; 0x788 <_Z11init_atmegav>
	I2C_Init();
    1974:	0e 94 b3 00 	call	0x166	; 0x166 <_Z8I2C_Initv>
	init_adc();
    1978:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z8init_adcv>
	init_UART();
    197c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_Z9init_UARTv>
	if (INIT_PIN) {init_EEprom(); LED_ON; _delay_ms(100); LED_OFF;  _delay_ms(100); LED_ON; _delay_ms(100); LED_OFF;}
    1980:	18 99       	sbic	0x03, 0	; 3
    1982:	29 c0       	rjmp	.+82     	; 0x19d6 <main+0x66>
    1984:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_Z11init_EEpromv>
    1988:	85 b1       	in	r24, 0x05	; 5
    198a:	80 62       	ori	r24, 0x20	; 32
    198c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    198e:	2f ef       	ldi	r18, 0xFF	; 255
    1990:	81 ee       	ldi	r24, 0xE1	; 225
    1992:	94 e0       	ldi	r25, 0x04	; 4
    1994:	21 50       	subi	r18, 0x01	; 1
    1996:	80 40       	sbci	r24, 0x00	; 0
    1998:	90 40       	sbci	r25, 0x00	; 0
    199a:	e1 f7       	brne	.-8      	; 0x1994 <main+0x24>
    199c:	00 c0       	rjmp	.+0      	; 0x199e <main+0x2e>
    199e:	00 00       	nop
    19a0:	85 b1       	in	r24, 0x05	; 5
    19a2:	8f 7d       	andi	r24, 0xDF	; 223
    19a4:	85 b9       	out	0x05, r24	; 5
    19a6:	2f ef       	ldi	r18, 0xFF	; 255
    19a8:	81 ee       	ldi	r24, 0xE1	; 225
    19aa:	94 e0       	ldi	r25, 0x04	; 4
    19ac:	21 50       	subi	r18, 0x01	; 1
    19ae:	80 40       	sbci	r24, 0x00	; 0
    19b0:	90 40       	sbci	r25, 0x00	; 0
    19b2:	e1 f7       	brne	.-8      	; 0x19ac <main+0x3c>
    19b4:	00 c0       	rjmp	.+0      	; 0x19b6 <main+0x46>
    19b6:	00 00       	nop
    19b8:	85 b1       	in	r24, 0x05	; 5
    19ba:	80 62       	ori	r24, 0x20	; 32
    19bc:	85 b9       	out	0x05, r24	; 5
    19be:	2f ef       	ldi	r18, 0xFF	; 255
    19c0:	81 ee       	ldi	r24, 0xE1	; 225
    19c2:	94 e0       	ldi	r25, 0x04	; 4
    19c4:	21 50       	subi	r18, 0x01	; 1
    19c6:	80 40       	sbci	r24, 0x00	; 0
    19c8:	90 40       	sbci	r25, 0x00	; 0
    19ca:	e1 f7       	brne	.-8      	; 0x19c4 <main+0x54>
    19cc:	00 c0       	rjmp	.+0      	; 0x19ce <main+0x5e>
    19ce:	00 00       	nop
    19d0:	85 b1       	in	r24, 0x05	; 5
    19d2:	8f 7d       	andi	r24, 0xDF	; 223
    19d4:	85 b9       	out	0x05, r24	; 5
	// если замкнуть ножку  D8 на землю то сбросить ≈≈пром
	if (UART_PIN) { LED_ON; UCSR0C = 0x06;}
    19d6:	1c 9b       	sbis	0x03, 4	; 3
    19d8:	06 c0       	rjmp	.+12     	; 0x19e6 <main+0x76>
    19da:	85 b1       	in	r24, 0x05	; 5
    19dc:	80 62       	ori	r24, 0x20	; 32
    19de:	85 b9       	out	0x05, r24	; 5
    19e0:	86 e0       	ldi	r24, 0x06	; 6
    19e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	read_ALL_EEprom();
    19e6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_Z15read_ALL_EEpromv>
	
	for(;;)
	{
		wdt_reset();
    19ea:	a8 95       	wdr
		cod_command = parsing_dat();
    19ec:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_Z11parsing_datv>
    19f0:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <cod_command>
		uart_data_comand(cod_command);
    19f4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_Z16uart_data_comandh>
		
		if (boolean.go){           // если подн€лс€ флаг прин€тых данных
    19f8:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <boolean>
    19fc:	80 ff       	sbrs	r24, 0
    19fe:	f5 cf       	rjmp	.-22     	; 0x19ea <main+0x7a>
			boolean.go = false;   // сбрасываем его
    1a00:	8e 7f       	andi	r24, 0xFE	; 254
    1a02:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <boolean>
			switch (count_adc_num){  // в зависимости от того что опрашивали сохран€ем данные
    1a06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	e1 f0       	breq	.+56     	; 0x1a46 <main+0xd6>
    1a0e:	18 f4       	brcc	.+6      	; 0x1a16 <main+0xa6>
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	31 f0       	breq	.+12     	; 0x1a20 <main+0xb0>
    1a14:	ea cf       	rjmp	.-44     	; 0x19ea <main+0x7a>
    1a16:	83 30       	cpi	r24, 0x03	; 3
    1a18:	49 f1       	breq	.+82     	; 0x1a6c <main+0xfc>
    1a1a:	84 30       	cpi	r24, 0x04	; 4
    1a1c:	d1 f1       	breq	.+116    	; 0x1a92 <main+0x122>
    1a1e:	e5 cf       	rjmp	.-54     	; 0x19ea <main+0x7a>
				case 1:
				adc_data.adc1_clear = get_data();      // получаем чистый код ј÷ѕ, чтоб можно было его использовать дл€ кода нул€
    1a20:	0e 94 15 01 	call	0x22a	; 0x22a <_Z8get_datav>
    1a24:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <adc_data+0x21>
    1a28:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <adc_data+0x20>
				adc_to_massa(count_adc_num, setting.filtr, adc_data.adc1_clear);   // и дальше отправл€ем на преобразование
    1a2c:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <setting+0x1>
    1a30:	ac 01       	movw	r20, r24
    1a32:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a36:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z12adc_to_massahhi>
				count_adc_num = 2;
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				start_convertion(count_adc_num);       // запускаем преобразование заново
    1a40:	0e 94 3c 01 	call	0x278	; 0x278 <_Z16start_convertionh>
				break;
    1a44:	d2 cf       	rjmp	.-92     	; 0x19ea <main+0x7a>
				case 2:
				adc_data.adc2_clear = get_data();
    1a46:	0e 94 15 01 	call	0x22a	; 0x22a <_Z8get_datav>
    1a4a:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <adc_data+0x23>
    1a4e:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <adc_data+0x22>
				adc_to_massa(count_adc_num, setting.filtr, adc_data.adc2_clear);
    1a52:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <setting+0x1>
    1a56:	ac 01       	movw	r20, r24
    1a58:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a5c:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z12adc_to_massahhi>
				count_adc_num = 3;
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				start_convertion(count_adc_num);       // запускаем преобразование заново
    1a66:	0e 94 3c 01 	call	0x278	; 0x278 <_Z16start_convertionh>
				break;
    1a6a:	bf cf       	rjmp	.-130    	; 0x19ea <main+0x7a>
				case 3:
				adc_data.adc3_clear = get_data();
    1a6c:	0e 94 15 01 	call	0x22a	; 0x22a <_Z8get_datav>
    1a70:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <adc_data+0x25>
    1a74:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <adc_data+0x24>
				adc_to_massa(count_adc_num, setting.filtr, adc_data.adc3_clear);
    1a78:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <setting+0x1>
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a82:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z12adc_to_massahhi>
				count_adc_num = 4;
    1a86:	84 e0       	ldi	r24, 0x04	; 4
    1a88:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				start_convertion(count_adc_num);       // запускаем преобразование заново
    1a8c:	0e 94 3c 01 	call	0x278	; 0x278 <_Z16start_convertionh>
				break;
    1a90:	ac cf       	rjmp	.-168    	; 0x19ea <main+0x7a>
				case 4:
				adc_data.adc4_clear = get_data();
    1a92:	0e 94 15 01 	call	0x22a	; 0x22a <_Z8get_datav>
    1a96:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <adc_data+0x27>
    1a9a:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <adc_data+0x26>
				adc_to_massa(count_adc_num, setting.filtr, adc_data.adc4_clear);
    1a9e:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <setting+0x1>
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1aa8:	0e 94 24 05 	call	0xa48	; 0xa48 <_Z12adc_to_massahhi>
				count_adc_num = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				start_convertion(count_adc_num);       // запускаем преобразование заново
    1ab2:	0e 94 3c 01 	call	0x278	; 0x278 <_Z16start_convertionh>
				break;
    1ab6:	99 cf       	rjmp	.-206    	; 0x19ea <main+0x7a>

00001ab8 <_Z9init_UARTv>:
char uart0_tx_buf [20];                       // буффер на передачу


void init_UART(void)                                  //»нициализаци€ модул€ USART
{
	UBRR0 = 103;//B19200;
    1ab8:	87 e6       	ldi	r24, 0x67	; 103
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    1ac0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0)|( 1<<TXEN0);                 //¬ключаем прием и передачу по USART
    1ac4:	e1 ec       	ldi	r30, 0xC1	; 193
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	88 e1       	ldi	r24, 0x18	; 24
    1aca:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0);                          //–азрешаем прерывание при приеме
    1acc:	80 81       	ld	r24, Z
    1ace:	80 68       	ori	r24, 0x80	; 128
    1ad0:	80 83       	st	Z, r24
	UCSR0C = (1<<UCSZ01)|(1<<UPM01)|(1<<UCSZ00);               //паритет 1, 8 бит  ???
    1ad2:	86 e2       	ldi	r24, 0x26	; 38
    1ad4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1ad8:	08 95       	ret

00001ada <__vector_16>:
}

ISR (TIMER0_OVF_vect)
{
    1ada:	1f 92       	push	r1
    1adc:	0f 92       	push	r0
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	0f 92       	push	r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	8f 93       	push	r24
	if (tim_uart0 < 250) {tim_uart0 ++;}
    1ae6:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <tim_uart0>
    1aea:	8a 3f       	cpi	r24, 0xFA	; 250
    1aec:	28 f4       	brcc	.+10     	; 0x1af8 <__vector_16+0x1e>
    1aee:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <tim_uart0>
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <tim_uart0>
	if (tim_uart0 == 249) { uart0_rx_caunter = 0; rx0_done = true; }
    1af8:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <tim_uart0>
    1afc:	89 3f       	cpi	r24, 0xF9	; 249
    1afe:	29 f4       	brne	.+10     	; 0x1b0a <__vector_16+0x30>
    1b00:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <uart0_rx_caunter>
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <rx0_done>
}
    1b0a:	8f 91       	pop	r24
    1b0c:	0f 90       	pop	r0
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	0f 90       	pop	r0
    1b12:	1f 90       	pop	r1
    1b14:	18 95       	reti

00001b16 <_Z17uart0_send_stringPch>:

//----------функции инициализации отправки данных----------//
bool uart0_send_string ( char *send, uint8_t len)                // сюда передаем строку в конце которой 0x01
{
    1b16:	dc 01       	movw	r26, r24
	if (uart0_tx_caunter == 0)                     // если счетчик на нуле можем обновить буфер, если нет то пропускаем
    1b18:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <uart0_tx_caunter>
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	28 c0       	rjmp	.+80     	; 0x1b70 <_Z17uart0_send_stringPch+0x5a>
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
	{
		for (int i = 0; i < len; i ++)             // забиваем буффер отправки символами из переданной строки
    1b24:	46 2f       	mov	r20, r22
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	24 17       	cp	r18, r20
    1b2a:	35 07       	cpc	r19, r21
    1b2c:	5c f4       	brge	.+22     	; 0x1b44 <_Z17uart0_send_stringPch+0x2e>
		{
			uart0_tx_buf[i] = send[i];
    1b2e:	fd 01       	movw	r30, r26
    1b30:	e2 0f       	add	r30, r18
    1b32:	f3 1f       	adc	r31, r19
    1b34:	90 81       	ld	r25, Z
    1b36:	f9 01       	movw	r30, r18
    1b38:	e0 5a       	subi	r30, 0xA0	; 160
    1b3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b3c:	90 83       	st	Z, r25
//----------функции инициализации отправки данных----------//
bool uart0_send_string ( char *send, uint8_t len)                // сюда передаем строку в конце которой 0x01
{
	if (uart0_tx_caunter == 0)                     // если счетчик на нуле можем обновить буфер, если нет то пропускаем
	{
		for (int i = 0; i < len; i ++)             // забиваем буффер отправки символами из переданной строки
    1b3e:	2f 5f       	subi	r18, 0xFF	; 255
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
    1b42:	f0 cf       	rjmp	.-32     	; 0x1b24 <_Z17uart0_send_stringPch+0xe>
		{
			uart0_tx_buf[i] = send[i];
			// if (uart0_tx_buf[i] == 0x01) break;   // пока не встретим символ 0x01. но его мы тоже заносим
		}
		UDR0 = uart0_tx_buf[uart0_tx_caunter];    // отправл€ем первый байт
    1b44:	e0 91 92 04 	lds	r30, 0x0492	; 0x800492 <uart0_tx_caunter>
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	e0 5a       	subi	r30, 0xA0	; 160
    1b4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1b4e:	80 81       	ld	r24, Z
    1b50:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		uart0_tx_caunter ++;                      // увеличиваем счетчик
    1b54:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <uart0_tx_caunter>
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <uart0_tx_caunter>
		UCSR0B |= ( 1<<UDRIE0);                   // включаем прерывание по опустрошению буффера передачи
    1b5e:	e1 ec       	ldi	r30, 0xC1	; 193
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 62       	ori	r24, 0x20	; 32
    1b66:	80 83       	st	Z, r24
		leng = len;
    1b68:	60 93 91 04 	sts	0x0491, r22	; 0x800491 <leng>
		return true;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	08 95       	ret
		} else{
		return false;
    1b70:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1b72:	08 95       	ret

00001b74 <__vector_19>:

//----------обработчики прерываний на передачу одинаковые----------//
ISR (USART_UDRE_vect)                                      // прерывание по опустошению буффера передачи
{
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	8f 93       	push	r24
    1b80:	9f 93       	push	r25
    1b82:	ef 93       	push	r30
    1b84:	ff 93       	push	r31
	if(uart0_tx_caunter < leng)
    1b86:	90 91 92 04 	lds	r25, 0x0492	; 0x800492 <uart0_tx_caunter>
    1b8a:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <leng>
    1b8e:	98 17       	cp	r25, r24
    1b90:	70 f4       	brcc	.+28     	; 0x1bae <__vector_19+0x3a>
	//if(uart0_tx_buf[uart0_tx_caunter] != 0x01)              // пока символ в буффере не равен 0x01
	{
		UDR0 = uart0_tx_buf[uart0_tx_caunter];            // продолжаем копировать из буффера байты в юарт
    1b92:	e0 91 92 04 	lds	r30, 0x0492	; 0x800492 <uart0_tx_caunter>
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	e0 5a       	subi	r30, 0xA0	; 160
    1b9a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b9c:	80 81       	ld	r24, Z
    1b9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		uart0_tx_caunter ++;                              // ну и естественно передвигаемс€ по массиву
    1ba2:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <uart0_tx_caunter>
    1ba6:	8f 5f       	subi	r24, 0xFF	; 255
    1ba8:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <uart0_tx_caunter>
    1bac:	07 c0       	rjmp	.+14     	; 0x1bbc <__vector_19+0x48>
	}
	else                                                   // если дошли до символа 0x01
	{
		uart0_tx_caunter = 0;                             // сбрасываем счетчик
    1bae:	10 92 92 04 	sts	0x0492, r1	; 0x800492 <uart0_tx_caunter>
		UCSR0B  &= ~ ( 1<<UDRIE0);                        // вырубаем прерывани€ по опустошению буфера
    1bb2:	e1 ec       	ldi	r30, 0xC1	; 193
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8f 7d       	andi	r24, 0xDF	; 223
    1bba:	80 83       	st	Z, r24
	}
}
    1bbc:	ff 91       	pop	r31
    1bbe:	ef 91       	pop	r30
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <__vector_18>:

ISR (USART_RX_vect)
{
    1bce:	1f 92       	push	r1
    1bd0:	0f 92       	push	r0
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	0f 92       	push	r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	8f 93       	push	r24
    1bda:	ef 93       	push	r30
    1bdc:	ff 93       	push	r31
	tim_uart0 = 0;                                                        // взводим таймер, на 150 (при таком раскладе это чуть больше чем длитс€ прием одного байта)
    1bde:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <tim_uart0>
	uart0_rx_buf[uart0_rx_caunter] = UDR0;                                // сохран€ем прин€тый байт
    1be2:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <uart0_rx_caunter>
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1bec:	ec 58       	subi	r30, 0x8C	; 140
    1bee:	fb 4f       	sbci	r31, 0xFB	; 251
    1bf0:	80 83       	st	Z, r24
	uart0_rx_caunter ++; if(uart0_rx_caunter > 18) uart0_rx_caunter = 0;  // если нулевой элемент 0 то продолжаем, если счетчик перевалил за 8 то сбросим в ноль
    1bf2:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <uart0_rx_caunter>
    1bf6:	8f 5f       	subi	r24, 0xFF	; 255
    1bf8:	80 93 93 04 	sts	0x0493, r24	; 0x800493 <uart0_rx_caunter>
    1bfc:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <uart0_rx_caunter>
    1c00:	83 31       	cpi	r24, 0x13	; 19
    1c02:	10 f0       	brcs	.+4      	; 0x1c08 <__vector_18+0x3a>
    1c04:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <uart0_rx_caunter>
}
    1c08:	ff 91       	pop	r31
    1c0a:	ef 91       	pop	r30
    1c0c:	8f 91       	pop	r24
    1c0e:	0f 90       	pop	r0
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	0f 90       	pop	r0
    1c14:	1f 90       	pop	r1
    1c16:	18 95       	reti

00001c18 <_Z9clear_bufv>:
	in_data = collect_massiv(uart0_rx_buf); // если это вес, транспортируем его в 32битную переменную
	clear_buf();
}

void clear_buf (void){  // сама€ проста€ очистка буффера
	for (uint8_t i = 0; i < 18; i ++){
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	82 31       	cpi	r24, 0x12	; 18
    1c1c:	38 f4       	brcc	.+14     	; 0x1c2c <_Z9clear_bufv+0x14>
		uart0_rx_buf [i] = 0x00;
    1c1e:	e8 2f       	mov	r30, r24
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	ec 58       	subi	r30, 0x8C	; 140
    1c24:	fb 4f       	sbci	r31, 0xFB	; 251
    1c26:	10 82       	st	Z, r1
	in_data = collect_massiv(uart0_rx_buf); // если это вес, транспортируем его в 32битную переменную
	clear_buf();
}

void clear_buf (void){  // сама€ проста€ очистка буффера
	for (uint8_t i = 0; i < 18; i ++){
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	f7 cf       	rjmp	.-18     	; 0x1c1a <_Z9clear_bufv+0x2>
    1c2c:	08 95       	ret

00001c2e <_Z14collect_massivPc>:
		uart0_rx_buf [i] = 0x00;
	}
}

uint32_t collect_massiv (char *massiv){       // собрать 32 битное число из вход€щих данных
    1c2e:	fc 01       	movw	r30, r24
	uint32_t dat;
	dat = massiv [5];
    1c30:	65 81       	ldd	r22, Z+5	; 0x05
    1c32:	86 2f       	mov	r24, r22
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
	dat = dat << 8;
    1c3a:	ba 2f       	mov	r27, r26
    1c3c:	a9 2f       	mov	r26, r25
    1c3e:	98 2f       	mov	r25, r24
    1c40:	88 27       	eor	r24, r24
	dat |= massiv [4];
    1c42:	24 81       	ldd	r18, Z+4	; 0x04
    1c44:	82 2b       	or	r24, r18
	dat = dat << 8;
    1c46:	ba 2f       	mov	r27, r26
    1c48:	a9 2f       	mov	r26, r25
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	88 27       	eor	r24, r24
	dat |= massiv [3];
    1c4e:	23 81       	ldd	r18, Z+3	; 0x03
    1c50:	82 2b       	or	r24, r18
	dat = dat << 8;
    1c52:	ba 2f       	mov	r27, r26
    1c54:	a9 2f       	mov	r26, r25
    1c56:	98 2f       	mov	r25, r24
    1c58:	88 27       	eor	r24, r24
	dat |= massiv [2];
    1c5a:	22 81       	ldd	r18, Z+2	; 0x02
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	62 2b       	or	r22, r18
	return dat;
}
    1c62:	08 95       	ret

00001c64 <_Z10copy_clearv>:
	}
	return 0;
}

void copy_clear (void) {                    // чтоб 100 раз не писать одно и тоже
	in_data = collect_massiv(uart0_rx_buf); // если это вес, транспортируем его в 32битную переменную
    1c64:	84 e7       	ldi	r24, 0x74	; 116
    1c66:	94 e0       	ldi	r25, 0x04	; 4
    1c68:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_Z14collect_massivPc>
    1c6c:	60 93 8c 04 	sts	0x048C, r22	; 0x80048c <in_data>
    1c70:	70 93 8d 04 	sts	0x048D, r23	; 0x80048d <in_data+0x1>
    1c74:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <in_data+0x2>
    1c78:	90 93 8f 04 	sts	0x048F, r25	; 0x80048f <in_data+0x3>
	clear_buf();
    1c7c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_Z9clear_bufv>
    1c80:	08 95       	ret

00001c82 <_Z18transmit_32_doublem>:
		double in_float;
		uint32_t out_float;
	}floatchik;
	floatchik.out_float = dat;
	return floatchik.in_float;                                         // вернули итог типа флоат
}
    1c82:	08 95       	ret

00001c84 <_Z11parsing_datv>:
}

uint8_t parsing_dat (void)       //парсинг вход€щих данных
{
	static uint8_t out;
	if (rx0_done){              // если подн€т флаг вход€щих данных
    1c84:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <rx0_done>
    1c88:	88 23       	and	r24, r24
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <_Z11parsing_datv+0xa>
    1c8c:	c5 c0       	rjmp	.+394    	; 0x1e18 <_Z11parsing_datv+0x194>
		rx0_done = false;      // сбросим его
    1c8e:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <rx0_done>
		if(uart0_rx_buf[0] == 0x02 && uart0_rx_buf[6] == 0x03){  // провер€ем первый и последний символ чтоб пон€ть 32 бита или 8
    1c92:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <uart0_rx_buf>
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <_Z11parsing_datv+0x18>
    1c9a:	a7 c0       	rjmp	.+334    	; 0x1dea <_Z11parsing_datv+0x166>
    1c9c:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <uart0_rx_buf+0x6>
    1ca0:	93 30       	cpi	r25, 0x03	; 3
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <_Z11parsing_datv+0x22>
    1ca4:	a2 c0       	rjmp	.+324    	; 0x1dea <_Z11parsing_datv+0x166>
			switch (uart0_rx_buf[1]){     // потом по первому символу смотрим что же за команда нам пришла
    1ca6:	e0 91 75 04 	lds	r30, 0x0475	; 0x800475 <uart0_rx_buf+0x1>
    1caa:	4e 2f       	mov	r20, r30
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	fa 01       	movw	r30, r20
    1cb0:	36 97       	sbiw	r30, 0x06	; 6
    1cb2:	ed 32       	cpi	r30, 0x2D	; 45
    1cb4:	f1 05       	cpc	r31, r1
    1cb6:	08 f0       	brcs	.+2      	; 0x1cba <_Z11parsing_datv+0x36>
    1cb8:	98 c0       	rjmp	.+304    	; 0x1dea <_Z11parsing_datv+0x166>
    1cba:	e9 59       	subi	r30, 0x99	; 153
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	0c 94 4e 11 	jmp	0x229c	; 0x229c <__tablejump2__>
				case NEW_K_K1:
				in_float = transmit_32_double (collect_massiv(uart0_rx_buf));  // если это флоат то сначала складываем в массив данные а потом транспортируем в флоат
    1cc2:	84 e7       	ldi	r24, 0x74	; 116
    1cc4:	94 e0       	ldi	r25, 0x04	; 4
    1cc6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_Z14collect_massivPc>
    1cca:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z18transmit_32_doublem>
    1cce:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <in_float>
    1cd2:	70 93 89 04 	sts	0x0489, r23	; 0x800489 <in_float+0x1>
    1cd6:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <in_float+0x2>
    1cda:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <in_float+0x3>
				clear_buf(); // очищаем буффер
    1cde:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_Z9clear_bufv>
				return NEW_K_K1;
    1ce2:	86 e0       	ldi	r24, 0x06	; 6
    1ce4:	08 95       	ret
				break;
				case NEW_K_K2:
				in_float = transmit_32_double (collect_massiv(uart0_rx_buf));
    1ce6:	84 e7       	ldi	r24, 0x74	; 116
    1ce8:	94 e0       	ldi	r25, 0x04	; 4
    1cea:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_Z14collect_massivPc>
    1cee:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z18transmit_32_doublem>
    1cf2:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <in_float>
    1cf6:	70 93 89 04 	sts	0x0489, r23	; 0x800489 <in_float+0x1>
    1cfa:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <in_float+0x2>
    1cfe:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <in_float+0x3>
				clear_buf();
    1d02:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_Z9clear_bufv>
				return NEW_K_K2;
    1d06:	87 e0       	ldi	r24, 0x07	; 7
    1d08:	08 95       	ret
				break;
				case NEW_K_K3:
				in_float = transmit_32_double (collect_massiv(uart0_rx_buf));
    1d0a:	84 e7       	ldi	r24, 0x74	; 116
    1d0c:	94 e0       	ldi	r25, 0x04	; 4
    1d0e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_Z14collect_massivPc>
    1d12:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z18transmit_32_doublem>
    1d16:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <in_float>
    1d1a:	70 93 89 04 	sts	0x0489, r23	; 0x800489 <in_float+0x1>
    1d1e:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <in_float+0x2>
    1d22:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <in_float+0x3>
				clear_buf();
    1d26:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_Z9clear_bufv>
				return NEW_K_K3;
    1d2a:	88 e0       	ldi	r24, 0x08	; 8
    1d2c:	08 95       	ret
				break;
				case NEW_K_K4:
				in_float = transmit_32_double (collect_massiv(uart0_rx_buf));
    1d2e:	84 e7       	ldi	r24, 0x74	; 116
    1d30:	94 e0       	ldi	r25, 0x04	; 4
    1d32:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_Z14collect_massivPc>
    1d36:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <_Z18transmit_32_doublem>
    1d3a:	60 93 88 04 	sts	0x0488, r22	; 0x800488 <in_float>
    1d3e:	70 93 89 04 	sts	0x0489, r23	; 0x800489 <in_float+0x1>
    1d42:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <in_float+0x2>
    1d46:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <in_float+0x3>
				clear_buf();
    1d4a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_Z9clear_bufv>
				return NEW_K_K4;
    1d4e:	89 e0       	ldi	r24, 0x09	; 9
    1d50:	08 95       	ret
				break;
				case NEW_MASSA1:
				copy_clear();
    1d52:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_MASSA1;
    1d56:	8a e0       	ldi	r24, 0x0A	; 10
    1d58:	08 95       	ret
				break;
				case NEW_MASSA2:
				copy_clear();
    1d5a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_MASSA2;
    1d5e:	8b e0       	ldi	r24, 0x0B	; 11
    1d60:	08 95       	ret
				break;
				case NEW_MASSA3:
				copy_clear();
    1d62:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_MASSA3;
    1d66:	8c e0       	ldi	r24, 0x0C	; 12
    1d68:	08 95       	ret
				break;
				case NEW_MASSA4:
				copy_clear();
    1d6a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_MASSA4;
    1d6e:	8d e0       	ldi	r24, 0x0D	; 13
    1d70:	08 95       	ret
				break;
				case NEW_DISKRT:
				copy_clear();
    1d72:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_DISKRT;
    1d76:	8e e0       	ldi	r24, 0x0E	; 14
    1d78:	08 95       	ret
				break;
				case NEW_FILTR:
				copy_clear();
    1d7a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_FILTR;
    1d7e:	80 e1       	ldi	r24, 0x10	; 16
    1d80:	08 95       	ret
				break;
				case NEW_TARA:
				copy_clear();
    1d82:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_TARA;
    1d86:	8b e1       	ldi	r24, 0x1B	; 27
    1d88:	08 95       	ret
				break;		
				case NEW_NUMBER_KK:
				copy_clear();
    1d8a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_NUMBER_KK;
    1d8e:	8c e1       	ldi	r24, 0x1C	; 28
    1d90:	08 95       	ret
				break;
//------------обновление Nextion--------//						
				case NEW_ZERO_AX:
				copy_clear();
    1d92:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_ZERO_AX;
    1d96:	8e e1       	ldi	r24, 0x1E	; 30
    1d98:	08 95       	ret
				break;
				case NEW_CELL0:
				copy_clear();
    1d9a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL0;
    1d9e:	80 e2       	ldi	r24, 0x20	; 32
    1da0:	08 95       	ret
				break;
				case NEW_CELL1:
				copy_clear();
    1da2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL1;
    1da6:	82 e2       	ldi	r24, 0x22	; 34
    1da8:	08 95       	ret
				break;
				case NEW_CELL2:
				copy_clear();
    1daa:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL2;
    1dae:	84 e2       	ldi	r24, 0x24	; 36
    1db0:	08 95       	ret
				break;
				case NEW_CELL3:
				copy_clear();
    1db2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL3;
    1db6:	86 e2       	ldi	r24, 0x26	; 38
    1db8:	08 95       	ret
				break;
				case NEW_CELL4:
				copy_clear();
    1dba:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL4;
    1dbe:	88 e2       	ldi	r24, 0x28	; 40
    1dc0:	08 95       	ret
				break;
				case NEW_CELL5:
				copy_clear();
    1dc2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL5;
    1dc6:	8a e2       	ldi	r24, 0x2A	; 42
    1dc8:	08 95       	ret
				break;
				case NEW_CELL6:
				copy_clear();
    1dca:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL6;
    1dce:	8c e2       	ldi	r24, 0x2C	; 44
    1dd0:	08 95       	ret
				break;
				case NEW_CELL7:
				copy_clear();
    1dd2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL7;
    1dd6:	8e e2       	ldi	r24, 0x2E	; 46
    1dd8:	08 95       	ret
				break;
				case NEW_CELL8:
				copy_clear();
    1dda:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL8;
    1dde:	80 e3       	ldi	r24, 0x30	; 48
    1de0:	08 95       	ret
				break;
				case NEW_CELL9:
				copy_clear();
    1de2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <_Z10copy_clearv>
				return NEW_CELL9;
    1de6:	82 e3       	ldi	r24, 0x32	; 50
    1de8:	08 95       	ret
				break;
			}
		}
		
		if(uart0_rx_buf[0] == 0x02  && uart0_rx_buf[2] == 0x03 && uart0_rx_buf[6] == 0x00)     // если у нас короткое сообщение
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	89 f4       	brne	.+34     	; 0x1e10 <_Z11parsing_datv+0x18c>
    1dee:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <uart0_rx_buf+0x2>
    1df2:	83 30       	cpi	r24, 0x03	; 3
    1df4:	69 f4       	brne	.+26     	; 0x1e10 <_Z11parsing_datv+0x18c>
    1df6:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <uart0_rx_buf+0x6>
    1dfa:	81 11       	cpse	r24, r1
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <_Z11parsing_datv+0x18c>
		{
			out = uart0_rx_buf[1];
    1dfe:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <uart0_rx_buf+0x1>
    1e02:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <_ZZ11parsing_datvE3out>
			clear_buf(); // очистить буфер
    1e06:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_Z9clear_bufv>
			return out;
    1e0a:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZZ11parsing_datvE3out>
    1e0e:	08 95       	ret
		}
		clear_buf(); // очистить буфер
    1e10:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_Z9clear_bufv>
		return 0;   // вернуть ноль
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	08 95       	ret
	}
	return 0;
    1e18:	80 e0       	ldi	r24, 0x00	; 0
}
    1e1a:	08 95       	ret

00001e1c <_Z18transmit_double_32d>:
		double in_float;
		uint32_t out_float;
	}floatchik;
	floatchik.in_float = dat;
	return floatchik.out_float;                                 // вернули итог типа 32bit
}
    1e1c:	08 95       	ret

00001e1e <__subsf3>:
    1e1e:	50 58       	subi	r21, 0x80	; 128

00001e20 <__addsf3>:
    1e20:	bb 27       	eor	r27, r27
    1e22:	aa 27       	eor	r26, r26
    1e24:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3x>
    1e28:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__fp_round>
    1e2c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fp_pscA>
    1e30:	38 f0       	brcs	.+14     	; 0x1e40 <__addsf3+0x20>
    1e32:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_pscB>
    1e36:	20 f0       	brcs	.+8      	; 0x1e40 <__addsf3+0x20>
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <__addsf3+0x28>
    1e3a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e3c:	19 f4       	brne	.+6      	; 0x1e44 <__addsf3+0x24>
    1e3e:	26 f4       	brtc	.+8      	; 0x1e48 <__addsf3+0x28>
    1e40:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__fp_nan>
    1e44:	0e f4       	brtc	.+2      	; 0x1e48 <__addsf3+0x28>
    1e46:	e0 95       	com	r30
    1e48:	e7 fb       	bst	r30, 7
    1e4a:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__fp_inf>

00001e4e <__addsf3x>:
    1e4e:	e9 2f       	mov	r30, r25
    1e50:	0e 94 89 10 	call	0x2112	; 0x2112 <__fp_split3>
    1e54:	58 f3       	brcs	.-42     	; 0x1e2c <__addsf3+0xc>
    1e56:	ba 17       	cp	r27, r26
    1e58:	62 07       	cpc	r22, r18
    1e5a:	73 07       	cpc	r23, r19
    1e5c:	84 07       	cpc	r24, r20
    1e5e:	95 07       	cpc	r25, r21
    1e60:	20 f0       	brcs	.+8      	; 0x1e6a <__addsf3x+0x1c>
    1e62:	79 f4       	brne	.+30     	; 0x1e82 <__addsf3x+0x34>
    1e64:	a6 f5       	brtc	.+104    	; 0x1ece <__addsf3x+0x80>
    1e66:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__fp_zero>
    1e6a:	0e f4       	brtc	.+2      	; 0x1e6e <__addsf3x+0x20>
    1e6c:	e0 95       	com	r30
    1e6e:	0b 2e       	mov	r0, r27
    1e70:	ba 2f       	mov	r27, r26
    1e72:	a0 2d       	mov	r26, r0
    1e74:	0b 01       	movw	r0, r22
    1e76:	b9 01       	movw	r22, r18
    1e78:	90 01       	movw	r18, r0
    1e7a:	0c 01       	movw	r0, r24
    1e7c:	ca 01       	movw	r24, r20
    1e7e:	a0 01       	movw	r20, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	ff 27       	eor	r31, r31
    1e84:	59 1b       	sub	r21, r25
    1e86:	99 f0       	breq	.+38     	; 0x1eae <__addsf3x+0x60>
    1e88:	59 3f       	cpi	r21, 0xF9	; 249
    1e8a:	50 f4       	brcc	.+20     	; 0x1ea0 <__addsf3x+0x52>
    1e8c:	50 3e       	cpi	r21, 0xE0	; 224
    1e8e:	68 f1       	brcs	.+90     	; 0x1eea <__addsf3x+0x9c>
    1e90:	1a 16       	cp	r1, r26
    1e92:	f0 40       	sbci	r31, 0x00	; 0
    1e94:	a2 2f       	mov	r26, r18
    1e96:	23 2f       	mov	r18, r19
    1e98:	34 2f       	mov	r19, r20
    1e9a:	44 27       	eor	r20, r20
    1e9c:	58 5f       	subi	r21, 0xF8	; 248
    1e9e:	f3 cf       	rjmp	.-26     	; 0x1e86 <__addsf3x+0x38>
    1ea0:	46 95       	lsr	r20
    1ea2:	37 95       	ror	r19
    1ea4:	27 95       	ror	r18
    1ea6:	a7 95       	ror	r26
    1ea8:	f0 40       	sbci	r31, 0x00	; 0
    1eaa:	53 95       	inc	r21
    1eac:	c9 f7       	brne	.-14     	; 0x1ea0 <__addsf3x+0x52>
    1eae:	7e f4       	brtc	.+30     	; 0x1ece <__addsf3x+0x80>
    1eb0:	1f 16       	cp	r1, r31
    1eb2:	ba 0b       	sbc	r27, r26
    1eb4:	62 0b       	sbc	r22, r18
    1eb6:	73 0b       	sbc	r23, r19
    1eb8:	84 0b       	sbc	r24, r20
    1eba:	ba f0       	brmi	.+46     	; 0x1eea <__addsf3x+0x9c>
    1ebc:	91 50       	subi	r25, 0x01	; 1
    1ebe:	a1 f0       	breq	.+40     	; 0x1ee8 <__addsf3x+0x9a>
    1ec0:	ff 0f       	add	r31, r31
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	66 1f       	adc	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	c2 f7       	brpl	.-16     	; 0x1ebc <__addsf3x+0x6e>
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <__addsf3x+0x9c>
    1ece:	ba 0f       	add	r27, r26
    1ed0:	62 1f       	adc	r22, r18
    1ed2:	73 1f       	adc	r23, r19
    1ed4:	84 1f       	adc	r24, r20
    1ed6:	48 f4       	brcc	.+18     	; 0x1eea <__addsf3x+0x9c>
    1ed8:	87 95       	ror	r24
    1eda:	77 95       	ror	r23
    1edc:	67 95       	ror	r22
    1ede:	b7 95       	ror	r27
    1ee0:	f7 95       	ror	r31
    1ee2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <__addsf3x+0x9a>
    1ee6:	b0 cf       	rjmp	.-160    	; 0x1e48 <__addsf3+0x28>
    1ee8:	93 95       	inc	r25
    1eea:	88 0f       	add	r24, r24
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <__addsf3x+0xa2>
    1eee:	99 27       	eor	r25, r25
    1ef0:	ee 0f       	add	r30, r30
    1ef2:	97 95       	ror	r25
    1ef4:	87 95       	ror	r24
    1ef6:	08 95       	ret

00001ef8 <__divsf3>:
    1ef8:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divsf3x>
    1efc:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__fp_round>
    1f00:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_pscB>
    1f04:	58 f0       	brcs	.+22     	; 0x1f1c <__divsf3+0x24>
    1f06:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fp_pscA>
    1f0a:	40 f0       	brcs	.+16     	; 0x1f1c <__divsf3+0x24>
    1f0c:	29 f4       	brne	.+10     	; 0x1f18 <__divsf3+0x20>
    1f0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f10:	29 f0       	breq	.+10     	; 0x1f1c <__divsf3+0x24>
    1f12:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__fp_inf>
    1f16:	51 11       	cpse	r21, r1
    1f18:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_szero>
    1f1c:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__fp_nan>

00001f20 <__divsf3x>:
    1f20:	0e 94 89 10 	call	0x2112	; 0x2112 <__fp_split3>
    1f24:	68 f3       	brcs	.-38     	; 0x1f00 <__divsf3+0x8>

00001f26 <__divsf3_pse>:
    1f26:	99 23       	and	r25, r25
    1f28:	b1 f3       	breq	.-20     	; 0x1f16 <__divsf3+0x1e>
    1f2a:	55 23       	and	r21, r21
    1f2c:	91 f3       	breq	.-28     	; 0x1f12 <__divsf3+0x1a>
    1f2e:	95 1b       	sub	r25, r21
    1f30:	55 0b       	sbc	r21, r21
    1f32:	bb 27       	eor	r27, r27
    1f34:	aa 27       	eor	r26, r26
    1f36:	62 17       	cp	r22, r18
    1f38:	73 07       	cpc	r23, r19
    1f3a:	84 07       	cpc	r24, r20
    1f3c:	38 f0       	brcs	.+14     	; 0x1f4c <__divsf3_pse+0x26>
    1f3e:	9f 5f       	subi	r25, 0xFF	; 255
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	22 0f       	add	r18, r18
    1f44:	33 1f       	adc	r19, r19
    1f46:	44 1f       	adc	r20, r20
    1f48:	aa 1f       	adc	r26, r26
    1f4a:	a9 f3       	breq	.-22     	; 0x1f36 <__divsf3_pse+0x10>
    1f4c:	35 d0       	rcall	.+106    	; 0x1fb8 <__divsf3_pse+0x92>
    1f4e:	0e 2e       	mov	r0, r30
    1f50:	3a f0       	brmi	.+14     	; 0x1f60 <__divsf3_pse+0x3a>
    1f52:	e0 e8       	ldi	r30, 0x80	; 128
    1f54:	32 d0       	rcall	.+100    	; 0x1fba <__divsf3_pse+0x94>
    1f56:	91 50       	subi	r25, 0x01	; 1
    1f58:	50 40       	sbci	r21, 0x00	; 0
    1f5a:	e6 95       	lsr	r30
    1f5c:	00 1c       	adc	r0, r0
    1f5e:	ca f7       	brpl	.-14     	; 0x1f52 <__divsf3_pse+0x2c>
    1f60:	2b d0       	rcall	.+86     	; 0x1fb8 <__divsf3_pse+0x92>
    1f62:	fe 2f       	mov	r31, r30
    1f64:	29 d0       	rcall	.+82     	; 0x1fb8 <__divsf3_pse+0x92>
    1f66:	66 0f       	add	r22, r22
    1f68:	77 1f       	adc	r23, r23
    1f6a:	88 1f       	adc	r24, r24
    1f6c:	bb 1f       	adc	r27, r27
    1f6e:	26 17       	cp	r18, r22
    1f70:	37 07       	cpc	r19, r23
    1f72:	48 07       	cpc	r20, r24
    1f74:	ab 07       	cpc	r26, r27
    1f76:	b0 e8       	ldi	r27, 0x80	; 128
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <__divsf3_pse+0x56>
    1f7a:	bb 0b       	sbc	r27, r27
    1f7c:	80 2d       	mov	r24, r0
    1f7e:	bf 01       	movw	r22, r30
    1f80:	ff 27       	eor	r31, r31
    1f82:	93 58       	subi	r25, 0x83	; 131
    1f84:	5f 4f       	sbci	r21, 0xFF	; 255
    1f86:	3a f0       	brmi	.+14     	; 0x1f96 <__divsf3_pse+0x70>
    1f88:	9e 3f       	cpi	r25, 0xFE	; 254
    1f8a:	51 05       	cpc	r21, r1
    1f8c:	78 f0       	brcs	.+30     	; 0x1fac <__divsf3_pse+0x86>
    1f8e:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__fp_inf>
    1f92:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_szero>
    1f96:	5f 3f       	cpi	r21, 0xFF	; 255
    1f98:	e4 f3       	brlt	.-8      	; 0x1f92 <__divsf3_pse+0x6c>
    1f9a:	98 3e       	cpi	r25, 0xE8	; 232
    1f9c:	d4 f3       	brlt	.-12     	; 0x1f92 <__divsf3_pse+0x6c>
    1f9e:	86 95       	lsr	r24
    1fa0:	77 95       	ror	r23
    1fa2:	67 95       	ror	r22
    1fa4:	b7 95       	ror	r27
    1fa6:	f7 95       	ror	r31
    1fa8:	9f 5f       	subi	r25, 0xFF	; 255
    1faa:	c9 f7       	brne	.-14     	; 0x1f9e <__divsf3_pse+0x78>
    1fac:	88 0f       	add	r24, r24
    1fae:	91 1d       	adc	r25, r1
    1fb0:	96 95       	lsr	r25
    1fb2:	87 95       	ror	r24
    1fb4:	97 f9       	bld	r25, 7
    1fb6:	08 95       	ret
    1fb8:	e1 e0       	ldi	r30, 0x01	; 1
    1fba:	66 0f       	add	r22, r22
    1fbc:	77 1f       	adc	r23, r23
    1fbe:	88 1f       	adc	r24, r24
    1fc0:	bb 1f       	adc	r27, r27
    1fc2:	62 17       	cp	r22, r18
    1fc4:	73 07       	cpc	r23, r19
    1fc6:	84 07       	cpc	r24, r20
    1fc8:	ba 07       	cpc	r27, r26
    1fca:	20 f0       	brcs	.+8      	; 0x1fd4 <__divsf3_pse+0xae>
    1fcc:	62 1b       	sub	r22, r18
    1fce:	73 0b       	sbc	r23, r19
    1fd0:	84 0b       	sbc	r24, r20
    1fd2:	ba 0b       	sbc	r27, r26
    1fd4:	ee 1f       	adc	r30, r30
    1fd6:	88 f7       	brcc	.-30     	; 0x1fba <__divsf3_pse+0x94>
    1fd8:	e0 95       	com	r30
    1fda:	08 95       	ret

00001fdc <__fixsfsi>:
    1fdc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__fixunssfsi>
    1fe0:	68 94       	set
    1fe2:	b1 11       	cpse	r27, r1
    1fe4:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_szero>
    1fe8:	08 95       	ret

00001fea <__fixunssfsi>:
    1fea:	0e 94 91 10 	call	0x2122	; 0x2122 <__fp_splitA>
    1fee:	88 f0       	brcs	.+34     	; 0x2012 <__fixunssfsi+0x28>
    1ff0:	9f 57       	subi	r25, 0x7F	; 127
    1ff2:	98 f0       	brcs	.+38     	; 0x201a <__fixunssfsi+0x30>
    1ff4:	b9 2f       	mov	r27, r25
    1ff6:	99 27       	eor	r25, r25
    1ff8:	b7 51       	subi	r27, 0x17	; 23
    1ffa:	b0 f0       	brcs	.+44     	; 0x2028 <__fixunssfsi+0x3e>
    1ffc:	e1 f0       	breq	.+56     	; 0x2036 <__fixunssfsi+0x4c>
    1ffe:	66 0f       	add	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	1a f0       	brmi	.+6      	; 0x200e <__fixunssfsi+0x24>
    2008:	ba 95       	dec	r27
    200a:	c9 f7       	brne	.-14     	; 0x1ffe <__fixunssfsi+0x14>
    200c:	14 c0       	rjmp	.+40     	; 0x2036 <__fixunssfsi+0x4c>
    200e:	b1 30       	cpi	r27, 0x01	; 1
    2010:	91 f0       	breq	.+36     	; 0x2036 <__fixunssfsi+0x4c>
    2012:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fp_zero>
    2016:	b1 e0       	ldi	r27, 0x01	; 1
    2018:	08 95       	ret
    201a:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__fp_zero>
    201e:	67 2f       	mov	r22, r23
    2020:	78 2f       	mov	r23, r24
    2022:	88 27       	eor	r24, r24
    2024:	b8 5f       	subi	r27, 0xF8	; 248
    2026:	39 f0       	breq	.+14     	; 0x2036 <__fixunssfsi+0x4c>
    2028:	b9 3f       	cpi	r27, 0xF9	; 249
    202a:	cc f3       	brlt	.-14     	; 0x201e <__fixunssfsi+0x34>
    202c:	86 95       	lsr	r24
    202e:	77 95       	ror	r23
    2030:	67 95       	ror	r22
    2032:	b3 95       	inc	r27
    2034:	d9 f7       	brne	.-10     	; 0x202c <__fixunssfsi+0x42>
    2036:	3e f4       	brtc	.+14     	; 0x2046 <__fixunssfsi+0x5c>
    2038:	90 95       	com	r25
    203a:	80 95       	com	r24
    203c:	70 95       	com	r23
    203e:	61 95       	neg	r22
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	8f 4f       	sbci	r24, 0xFF	; 255
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	08 95       	ret

00002048 <__floatunsisf>:
    2048:	e8 94       	clt
    204a:	09 c0       	rjmp	.+18     	; 0x205e <__floatsisf+0x12>

0000204c <__floatsisf>:
    204c:	97 fb       	bst	r25, 7
    204e:	3e f4       	brtc	.+14     	; 0x205e <__floatsisf+0x12>
    2050:	90 95       	com	r25
    2052:	80 95       	com	r24
    2054:	70 95       	com	r23
    2056:	61 95       	neg	r22
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	8f 4f       	sbci	r24, 0xFF	; 255
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	99 23       	and	r25, r25
    2060:	a9 f0       	breq	.+42     	; 0x208c <__floatsisf+0x40>
    2062:	f9 2f       	mov	r31, r25
    2064:	96 e9       	ldi	r25, 0x96	; 150
    2066:	bb 27       	eor	r27, r27
    2068:	93 95       	inc	r25
    206a:	f6 95       	lsr	r31
    206c:	87 95       	ror	r24
    206e:	77 95       	ror	r23
    2070:	67 95       	ror	r22
    2072:	b7 95       	ror	r27
    2074:	f1 11       	cpse	r31, r1
    2076:	f8 cf       	rjmp	.-16     	; 0x2068 <__floatsisf+0x1c>
    2078:	fa f4       	brpl	.+62     	; 0x20b8 <__floatsisf+0x6c>
    207a:	bb 0f       	add	r27, r27
    207c:	11 f4       	brne	.+4      	; 0x2082 <__floatsisf+0x36>
    207e:	60 ff       	sbrs	r22, 0
    2080:	1b c0       	rjmp	.+54     	; 0x20b8 <__floatsisf+0x6c>
    2082:	6f 5f       	subi	r22, 0xFF	; 255
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	8f 4f       	sbci	r24, 0xFF	; 255
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	16 c0       	rjmp	.+44     	; 0x20b8 <__floatsisf+0x6c>
    208c:	88 23       	and	r24, r24
    208e:	11 f0       	breq	.+4      	; 0x2094 <__floatsisf+0x48>
    2090:	96 e9       	ldi	r25, 0x96	; 150
    2092:	11 c0       	rjmp	.+34     	; 0x20b6 <__floatsisf+0x6a>
    2094:	77 23       	and	r23, r23
    2096:	21 f0       	breq	.+8      	; 0x20a0 <__floatsisf+0x54>
    2098:	9e e8       	ldi	r25, 0x8E	; 142
    209a:	87 2f       	mov	r24, r23
    209c:	76 2f       	mov	r23, r22
    209e:	05 c0       	rjmp	.+10     	; 0x20aa <__floatsisf+0x5e>
    20a0:	66 23       	and	r22, r22
    20a2:	71 f0       	breq	.+28     	; 0x20c0 <__floatsisf+0x74>
    20a4:	96 e8       	ldi	r25, 0x86	; 134
    20a6:	86 2f       	mov	r24, r22
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	2a f0       	brmi	.+10     	; 0x20b8 <__floatsisf+0x6c>
    20ae:	9a 95       	dec	r25
    20b0:	66 0f       	add	r22, r22
    20b2:	77 1f       	adc	r23, r23
    20b4:	88 1f       	adc	r24, r24
    20b6:	da f7       	brpl	.-10     	; 0x20ae <__floatsisf+0x62>
    20b8:	88 0f       	add	r24, r24
    20ba:	96 95       	lsr	r25
    20bc:	87 95       	ror	r24
    20be:	97 f9       	bld	r25, 7
    20c0:	08 95       	ret

000020c2 <__fp_inf>:
    20c2:	97 f9       	bld	r25, 7
    20c4:	9f 67       	ori	r25, 0x7F	; 127
    20c6:	80 e8       	ldi	r24, 0x80	; 128
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	08 95       	ret

000020ce <__fp_nan>:
    20ce:	9f ef       	ldi	r25, 0xFF	; 255
    20d0:	80 ec       	ldi	r24, 0xC0	; 192
    20d2:	08 95       	ret

000020d4 <__fp_pscA>:
    20d4:	00 24       	eor	r0, r0
    20d6:	0a 94       	dec	r0
    20d8:	16 16       	cp	r1, r22
    20da:	17 06       	cpc	r1, r23
    20dc:	18 06       	cpc	r1, r24
    20de:	09 06       	cpc	r0, r25
    20e0:	08 95       	ret

000020e2 <__fp_pscB>:
    20e2:	00 24       	eor	r0, r0
    20e4:	0a 94       	dec	r0
    20e6:	12 16       	cp	r1, r18
    20e8:	13 06       	cpc	r1, r19
    20ea:	14 06       	cpc	r1, r20
    20ec:	05 06       	cpc	r0, r21
    20ee:	08 95       	ret

000020f0 <__fp_round>:
    20f0:	09 2e       	mov	r0, r25
    20f2:	03 94       	inc	r0
    20f4:	00 0c       	add	r0, r0
    20f6:	11 f4       	brne	.+4      	; 0x20fc <__fp_round+0xc>
    20f8:	88 23       	and	r24, r24
    20fa:	52 f0       	brmi	.+20     	; 0x2110 <__fp_round+0x20>
    20fc:	bb 0f       	add	r27, r27
    20fe:	40 f4       	brcc	.+16     	; 0x2110 <__fp_round+0x20>
    2100:	bf 2b       	or	r27, r31
    2102:	11 f4       	brne	.+4      	; 0x2108 <__fp_round+0x18>
    2104:	60 ff       	sbrs	r22, 0
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <__fp_round+0x20>
    2108:	6f 5f       	subi	r22, 0xFF	; 255
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	8f 4f       	sbci	r24, 0xFF	; 255
    210e:	9f 4f       	sbci	r25, 0xFF	; 255
    2110:	08 95       	ret

00002112 <__fp_split3>:
    2112:	57 fd       	sbrc	r21, 7
    2114:	90 58       	subi	r25, 0x80	; 128
    2116:	44 0f       	add	r20, r20
    2118:	55 1f       	adc	r21, r21
    211a:	59 f0       	breq	.+22     	; 0x2132 <__fp_splitA+0x10>
    211c:	5f 3f       	cpi	r21, 0xFF	; 255
    211e:	71 f0       	breq	.+28     	; 0x213c <__fp_splitA+0x1a>
    2120:	47 95       	ror	r20

00002122 <__fp_splitA>:
    2122:	88 0f       	add	r24, r24
    2124:	97 fb       	bst	r25, 7
    2126:	99 1f       	adc	r25, r25
    2128:	61 f0       	breq	.+24     	; 0x2142 <__fp_splitA+0x20>
    212a:	9f 3f       	cpi	r25, 0xFF	; 255
    212c:	79 f0       	breq	.+30     	; 0x214c <__fp_splitA+0x2a>
    212e:	87 95       	ror	r24
    2130:	08 95       	ret
    2132:	12 16       	cp	r1, r18
    2134:	13 06       	cpc	r1, r19
    2136:	14 06       	cpc	r1, r20
    2138:	55 1f       	adc	r21, r21
    213a:	f2 cf       	rjmp	.-28     	; 0x2120 <__fp_split3+0xe>
    213c:	46 95       	lsr	r20
    213e:	f1 df       	rcall	.-30     	; 0x2122 <__fp_splitA>
    2140:	08 c0       	rjmp	.+16     	; 0x2152 <__fp_splitA+0x30>
    2142:	16 16       	cp	r1, r22
    2144:	17 06       	cpc	r1, r23
    2146:	18 06       	cpc	r1, r24
    2148:	99 1f       	adc	r25, r25
    214a:	f1 cf       	rjmp	.-30     	; 0x212e <__fp_splitA+0xc>
    214c:	86 95       	lsr	r24
    214e:	71 05       	cpc	r23, r1
    2150:	61 05       	cpc	r22, r1
    2152:	08 94       	sec
    2154:	08 95       	ret

00002156 <__fp_zero>:
    2156:	e8 94       	clt

00002158 <__fp_szero>:
    2158:	bb 27       	eor	r27, r27
    215a:	66 27       	eor	r22, r22
    215c:	77 27       	eor	r23, r23
    215e:	cb 01       	movw	r24, r22
    2160:	97 f9       	bld	r25, 7
    2162:	08 95       	ret

00002164 <__mulsf3>:
    2164:	0e 94 c5 10 	call	0x218a	; 0x218a <__mulsf3x>
    2168:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__fp_round>
    216c:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fp_pscA>
    2170:	38 f0       	brcs	.+14     	; 0x2180 <__mulsf3+0x1c>
    2172:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__fp_pscB>
    2176:	20 f0       	brcs	.+8      	; 0x2180 <__mulsf3+0x1c>
    2178:	95 23       	and	r25, r21
    217a:	11 f0       	breq	.+4      	; 0x2180 <__mulsf3+0x1c>
    217c:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__fp_inf>
    2180:	0c 94 67 10 	jmp	0x20ce	; 0x20ce <__fp_nan>
    2184:	11 24       	eor	r1, r1
    2186:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_szero>

0000218a <__mulsf3x>:
    218a:	0e 94 89 10 	call	0x2112	; 0x2112 <__fp_split3>
    218e:	70 f3       	brcs	.-36     	; 0x216c <__mulsf3+0x8>

00002190 <__mulsf3_pse>:
    2190:	95 9f       	mul	r25, r21
    2192:	c1 f3       	breq	.-16     	; 0x2184 <__mulsf3+0x20>
    2194:	95 0f       	add	r25, r21
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	55 1f       	adc	r21, r21
    219a:	62 9f       	mul	r22, r18
    219c:	f0 01       	movw	r30, r0
    219e:	72 9f       	mul	r23, r18
    21a0:	bb 27       	eor	r27, r27
    21a2:	f0 0d       	add	r31, r0
    21a4:	b1 1d       	adc	r27, r1
    21a6:	63 9f       	mul	r22, r19
    21a8:	aa 27       	eor	r26, r26
    21aa:	f0 0d       	add	r31, r0
    21ac:	b1 1d       	adc	r27, r1
    21ae:	aa 1f       	adc	r26, r26
    21b0:	64 9f       	mul	r22, r20
    21b2:	66 27       	eor	r22, r22
    21b4:	b0 0d       	add	r27, r0
    21b6:	a1 1d       	adc	r26, r1
    21b8:	66 1f       	adc	r22, r22
    21ba:	82 9f       	mul	r24, r18
    21bc:	22 27       	eor	r18, r18
    21be:	b0 0d       	add	r27, r0
    21c0:	a1 1d       	adc	r26, r1
    21c2:	62 1f       	adc	r22, r18
    21c4:	73 9f       	mul	r23, r19
    21c6:	b0 0d       	add	r27, r0
    21c8:	a1 1d       	adc	r26, r1
    21ca:	62 1f       	adc	r22, r18
    21cc:	83 9f       	mul	r24, r19
    21ce:	a0 0d       	add	r26, r0
    21d0:	61 1d       	adc	r22, r1
    21d2:	22 1f       	adc	r18, r18
    21d4:	74 9f       	mul	r23, r20
    21d6:	33 27       	eor	r19, r19
    21d8:	a0 0d       	add	r26, r0
    21da:	61 1d       	adc	r22, r1
    21dc:	23 1f       	adc	r18, r19
    21de:	84 9f       	mul	r24, r20
    21e0:	60 0d       	add	r22, r0
    21e2:	21 1d       	adc	r18, r1
    21e4:	82 2f       	mov	r24, r18
    21e6:	76 2f       	mov	r23, r22
    21e8:	6a 2f       	mov	r22, r26
    21ea:	11 24       	eor	r1, r1
    21ec:	9f 57       	subi	r25, 0x7F	; 127
    21ee:	50 40       	sbci	r21, 0x00	; 0
    21f0:	9a f0       	brmi	.+38     	; 0x2218 <__mulsf3_pse+0x88>
    21f2:	f1 f0       	breq	.+60     	; 0x2230 <__mulsf3_pse+0xa0>
    21f4:	88 23       	and	r24, r24
    21f6:	4a f0       	brmi	.+18     	; 0x220a <__mulsf3_pse+0x7a>
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	bb 1f       	adc	r27, r27
    21fe:	66 1f       	adc	r22, r22
    2200:	77 1f       	adc	r23, r23
    2202:	88 1f       	adc	r24, r24
    2204:	91 50       	subi	r25, 0x01	; 1
    2206:	50 40       	sbci	r21, 0x00	; 0
    2208:	a9 f7       	brne	.-22     	; 0x21f4 <__mulsf3_pse+0x64>
    220a:	9e 3f       	cpi	r25, 0xFE	; 254
    220c:	51 05       	cpc	r21, r1
    220e:	80 f0       	brcs	.+32     	; 0x2230 <__mulsf3_pse+0xa0>
    2210:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__fp_inf>
    2214:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__fp_szero>
    2218:	5f 3f       	cpi	r21, 0xFF	; 255
    221a:	e4 f3       	brlt	.-8      	; 0x2214 <__mulsf3_pse+0x84>
    221c:	98 3e       	cpi	r25, 0xE8	; 232
    221e:	d4 f3       	brlt	.-12     	; 0x2214 <__mulsf3_pse+0x84>
    2220:	86 95       	lsr	r24
    2222:	77 95       	ror	r23
    2224:	67 95       	ror	r22
    2226:	b7 95       	ror	r27
    2228:	f7 95       	ror	r31
    222a:	e7 95       	ror	r30
    222c:	9f 5f       	subi	r25, 0xFF	; 255
    222e:	c1 f7       	brne	.-16     	; 0x2220 <__mulsf3_pse+0x90>
    2230:	fe 2b       	or	r31, r30
    2232:	88 0f       	add	r24, r24
    2234:	91 1d       	adc	r25, r1
    2236:	96 95       	lsr	r25
    2238:	87 95       	ror	r24
    223a:	97 f9       	bld	r25, 7
    223c:	08 95       	ret

0000223e <__mulsi3>:
    223e:	db 01       	movw	r26, r22
    2240:	8f 93       	push	r24
    2242:	9f 93       	push	r25
    2244:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__muluhisi3>
    2248:	bf 91       	pop	r27
    224a:	af 91       	pop	r26
    224c:	a2 9f       	mul	r26, r18
    224e:	80 0d       	add	r24, r0
    2250:	91 1d       	adc	r25, r1
    2252:	a3 9f       	mul	r26, r19
    2254:	90 0d       	add	r25, r0
    2256:	b2 9f       	mul	r27, r18
    2258:	90 0d       	add	r25, r0
    225a:	11 24       	eor	r1, r1
    225c:	08 95       	ret

0000225e <__divmodsi4>:
    225e:	05 2e       	mov	r0, r21
    2260:	97 fb       	bst	r25, 7
    2262:	1e f4       	brtc	.+6      	; 0x226a <__divmodsi4+0xc>
    2264:	00 94       	com	r0
    2266:	0e 94 46 11 	call	0x228c	; 0x228c <__negsi2>
    226a:	57 fd       	sbrc	r21, 7
    226c:	07 d0       	rcall	.+14     	; 0x227c <__divmodsi4_neg2>
    226e:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodsi4>
    2272:	07 fc       	sbrc	r0, 7
    2274:	03 d0       	rcall	.+6      	; 0x227c <__divmodsi4_neg2>
    2276:	4e f4       	brtc	.+18     	; 0x228a <__divmodsi4_exit>
    2278:	0c 94 46 11 	jmp	0x228c	; 0x228c <__negsi2>

0000227c <__divmodsi4_neg2>:
    227c:	50 95       	com	r21
    227e:	40 95       	com	r20
    2280:	30 95       	com	r19
    2282:	21 95       	neg	r18
    2284:	3f 4f       	sbci	r19, 0xFF	; 255
    2286:	4f 4f       	sbci	r20, 0xFF	; 255
    2288:	5f 4f       	sbci	r21, 0xFF	; 255

0000228a <__divmodsi4_exit>:
    228a:	08 95       	ret

0000228c <__negsi2>:
    228c:	90 95       	com	r25
    228e:	80 95       	com	r24
    2290:	70 95       	com	r23
    2292:	61 95       	neg	r22
    2294:	7f 4f       	sbci	r23, 0xFF	; 255
    2296:	8f 4f       	sbci	r24, 0xFF	; 255
    2298:	9f 4f       	sbci	r25, 0xFF	; 255
    229a:	08 95       	ret

0000229c <__tablejump2__>:
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	05 90       	lpm	r0, Z+
    22a2:	f4 91       	lpm	r31, Z
    22a4:	e0 2d       	mov	r30, r0
    22a6:	09 94       	ijmp

000022a8 <__muluhisi3>:
    22a8:	0e 94 81 11 	call	0x2302	; 0x2302 <__umulhisi3>
    22ac:	a5 9f       	mul	r26, r21
    22ae:	90 0d       	add	r25, r0
    22b0:	b4 9f       	mul	r27, r20
    22b2:	90 0d       	add	r25, r0
    22b4:	a4 9f       	mul	r26, r20
    22b6:	80 0d       	add	r24, r0
    22b8:	91 1d       	adc	r25, r1
    22ba:	11 24       	eor	r1, r1
    22bc:	08 95       	ret

000022be <__udivmodsi4>:
    22be:	a1 e2       	ldi	r26, 0x21	; 33
    22c0:	1a 2e       	mov	r1, r26
    22c2:	aa 1b       	sub	r26, r26
    22c4:	bb 1b       	sub	r27, r27
    22c6:	fd 01       	movw	r30, r26
    22c8:	0d c0       	rjmp	.+26     	; 0x22e4 <__udivmodsi4_ep>

000022ca <__udivmodsi4_loop>:
    22ca:	aa 1f       	adc	r26, r26
    22cc:	bb 1f       	adc	r27, r27
    22ce:	ee 1f       	adc	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	a2 17       	cp	r26, r18
    22d4:	b3 07       	cpc	r27, r19
    22d6:	e4 07       	cpc	r30, r20
    22d8:	f5 07       	cpc	r31, r21
    22da:	20 f0       	brcs	.+8      	; 0x22e4 <__udivmodsi4_ep>
    22dc:	a2 1b       	sub	r26, r18
    22de:	b3 0b       	sbc	r27, r19
    22e0:	e4 0b       	sbc	r30, r20
    22e2:	f5 0b       	sbc	r31, r21

000022e4 <__udivmodsi4_ep>:
    22e4:	66 1f       	adc	r22, r22
    22e6:	77 1f       	adc	r23, r23
    22e8:	88 1f       	adc	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	1a 94       	dec	r1
    22ee:	69 f7       	brne	.-38     	; 0x22ca <__udivmodsi4_loop>
    22f0:	60 95       	com	r22
    22f2:	70 95       	com	r23
    22f4:	80 95       	com	r24
    22f6:	90 95       	com	r25
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	bd 01       	movw	r22, r26
    22fe:	cf 01       	movw	r24, r30
    2300:	08 95       	ret

00002302 <__umulhisi3>:
    2302:	a2 9f       	mul	r26, r18
    2304:	b0 01       	movw	r22, r0
    2306:	b3 9f       	mul	r27, r19
    2308:	c0 01       	movw	r24, r0
    230a:	a3 9f       	mul	r26, r19
    230c:	70 0d       	add	r23, r0
    230e:	81 1d       	adc	r24, r1
    2310:	11 24       	eor	r1, r1
    2312:	91 1d       	adc	r25, r1
    2314:	b2 9f       	mul	r27, r18
    2316:	70 0d       	add	r23, r0
    2318:	81 1d       	adc	r24, r1
    231a:	11 24       	eor	r1, r1
    231c:	91 1d       	adc	r25, r1
    231e:	08 95       	ret

00002320 <_exit>:
    2320:	f8 94       	cli

00002322 <__stop_program>:
    2322:	ff cf       	rjmp	.-2      	; 0x2322 <__stop_program>
